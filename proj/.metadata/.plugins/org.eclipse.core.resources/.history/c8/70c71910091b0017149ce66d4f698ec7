#include "cuda_test_kernels.cuh"

__global__ void aes_add_16B_round_key_kernel
(
	uint32_t data1,
	uint32_t data2,
	uint32_t data3,
	uint32_t data4,
	uint32_t key1,
	uint32_t key2,
	uint32_t key3,
	uint32_t key4
)
{
	aes_add_16B_round_key(data1,data2,data3,data4,key1,key2,key3,key4);
}


_16B aes_add_16B_round_key_call(
		uint32_t data1,
		uint32_t data2,
		uint32_t data3,
		uint32_t data4,
		uint32_t key1,
		uint32_t key2,
		uint32_t key3,
		uint32_t key4)
{
	uint32_t* dd1, dd2, dd3, dd4;
	cudaMalloc(&dd1,sizeof(unint32_t));
	cudaMalloc(&dd2,sizeof(unint32_t));
	cudaMalloc(&dd3,sizeof(unint32_t));
	cudaMalloc(&dd4,sizeof(unint32_t));
	cudaMemcpy(dd1, &data1, sizeof(unint32_t), cudaMemcpyHostToDevice);
	cudaMemcpy(dd2, &data2, sizeof(unint32_t), cudaMemcpyDeviceToHost);
	cudaMemcpy(dd3 ,&data3, sizeof(unint32_t), cudaMemcpyDeviceToHost);
	cudaMemcpy(&data4, dd4, sizeof(unint32_t), cudaMemcpyDeviceToHost);

	aes_add_16B_round_key_kernel<<<1,16>>>(dd1,dd2,dd3,dd4,key1,key2,key3,key4);

	_16B result;
	cudaMemcpy(&result.w1, dd1, sizeof(unint32_t), cudaMemcpyDeviceToHost);
	cudaMemcpy(&result.w2, dd2, sizeof(unint32_t), cudaMemcpyDeviceToHost);
	cudaMemcpy(&result.w3, dd3, sizeof(unint32_t), cudaMemcpyDeviceToHost);
	cudaMemcpy(&result.w4, dd4, sizeof(unint32_t), cudaMemcpyDeviceToHost);
	return result;
}
