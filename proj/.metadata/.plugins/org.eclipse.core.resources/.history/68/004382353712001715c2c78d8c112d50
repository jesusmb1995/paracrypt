#pragma once

#include "GPUCipherDevice.hpp"
#include "cuda.h"
#include "cuda_runtime_api.h"
#include <map>
#include <unordered_map>

namespace paracrypt {

    class CUDACipherDevice:public GPUCipherDevice<cudaStream_t,cudaStreamCallback_t> {
      private:
	int device;
	cudaDeviceProp devProp;
	int maxCudaBlocksPerSM;
	int nWarpsPerBlock;
	int nThreadsPerThreadBlock;
	int nConcurrentKernels;
	std::unordered_map<int,cudaEvent_t> cpyFromEvents;
	std::unordered_map<int,cudaStreamCallback_t> cpyFromCallbacks;
#define HANDLE_ERROR( err ) (HandleError( err, __FILE__, __LINE__ ))
	static void HandleError(cudaError_t err,
				const char *file, int line);
      protected:
	cudaStream_t newStream();
	void freeStream(cudaStream_t s);
      public:
	// 0 <= device < cudaGetDeviceCount()
	 CUDACipherDevice(int device);
	int getNWarpsPerBlock();
	int getThreadsPerThreadBlock();
	int getMaxBlocksPerSM();
	int getConcurrentKernels();
	int getGridSize(int n_blocks, int threadsPerCipherBlock);
	const cudaDeviceProp* getDeviceProperties();
	void set();
	void malloc(void** data, int size);
	void free(void* data);
	void memcpyTo(void* host, void* dev, int size, int stream_id);
	void memcpyFrom(void* dev, void* host, int size, int stream_id);
	void waitMemcpyFrom(int stream_id);
	void checkMemcpyFrom(int stream_id);
	void setMemCpyFromCallback(int stream_id, cudaStreamCallback_t func);
	int addStream(); // thread-safe
	void delStream(int stream_id); // thread-safe
    };

	//void waitMemCpyFrom(); // TODO esperar a evento creado.
	//void  // TODO dos metodos: cudaEventQuery (status) y
	// http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#axzz4cLExjEKQ
	// callback K20 or newer
	// cudaStreamAddCallback - The function to call once preceding stream operations are complete
	// Read more at: http://docs.nvidia.com/cuda/cuda-runtime-api/index.html#ixzz4cLGwiYHH

    // TODO call delStream desde eldestructor de CudaEcb
}
