#include "AES.hpp"
#include <cstddef>
#include <stdlib.h>
#include "../logging.hpp"

paracrypt::AES::AES()
{
	this->key = NULL;
    this->enRoundKeys = NULL;
    this->deRoundKeys = NULL;
    this->enKeyPropietary = false;
    this->deKeyPropietary = false;
}

paracrypt::AES::~AES()
{
    if (this->keyPropietary && this->roundKeys != NULL)
    if(this->enRoundKeys != NULL) {
    	free(this->enRoundKeys);
    }
    if(this->deRoundKeys != NULL) {
    	free(this->deRoundKeys);
    }
    free(this->key);
}

// TODO set decrypt key
int paracrypt::AES::setKey(const unsigned char key[], int bits)
{
    if (this->key == NULL) {
    	this->key_bytes = bits/8;
    	this->key = (unsigned char*) malloc(this->key_bytes);
    	memcpy(this->key,key,this->key_bytes);
    }
    return 0;
}

// Warning: If we destruct the object who owns the key 
//  we will point to nowhere
int paracrypt::AES::setEncryptionKey(AES_KEY * expandedKey)
{
    if (this->enKeyPropietary && this->enRoundKeys != NULL) {
    	free(this->enKeyPropietary);
    	this->enKeyPropietary = false;
    }
    this->enRoundKeys = expandedKey;
    return 0;
}

int paracrypt::AES::setDecryptionKey(AES_KEY * expandedKey)
{
    if (this->deKeyPropietary && this->deRoundKeys != NULL) {
    	free(this->deKeyPropietary);
    	this->deKeyPropietary = false;
    }
    this->deRoundKeys = expandedKey;
    return 0;
}


AES_KEY *paracrypt::AES::getEncryptionExpandedKey()
{
	if(this->enRoundKeys == NULL) {
		this->roundKeys = (AES_KEY *) malloc(sizeof(AES_KEY));
		this->keyPropietary = true;
		AES_set_encrypt_key(key, bits, this->roundKeys);
	}
}

int paracrypt::AES::setBlockSize(int bits)
{
    return 0;
}
