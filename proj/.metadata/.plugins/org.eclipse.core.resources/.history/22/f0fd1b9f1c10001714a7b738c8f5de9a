#include "CudaEcbAes16B.hpp"

int paracrypt::CudaEcbAES16B::encrypt(const unsigned char in[],
				      const unsigned char out[],
				      int n_blocks)
{
    int gridSize = this->device->getGridSize(n_blocks,1);
    int threadsPerBlock = this->getDevice()->getThreadsPerThreadBlock();

    unsigned char data[];


	this->device->memcpyTo(this->data, in, keySize);

	//TODO change by CUDACipherDevic malloc and memcpy

    // in-place processing, ignore interface out argument
    cuda_ecb_aes_16b_encrypt<<gridSize,threadsPerBlock>>(data,this->getDeviceKey(),n_blocks);

    HANDLE_ERROR(cudaMemcpy(this->data, in, keySize,cudaMemcpyHostToDevice));

    return 0;
}

int paracrypt::CudaEcbAES16B::decrypt(const unsigned char in[],
				      const unsigned char out[],
				      int n_blocks)
{
    int gridSize = getGridSize(n_blocks);


    cuda_ecb_aes_16b_decrypt << gridSize, threadsPerBlock >> (in, key,
							      n_blocks);

    return 0;
}
