#include <stdint.h>
#include "../logging.hpp"
#include "../openssl/aes_locl.h"

//
/*-
Te0[x] = S [x].[02, 01, 01, 03];
Te1[x] = S [x].[03, 02, 01, 01];
Te2[x] = S [x].[01, 03, 02, 01];
Te3[x] = S [x].[01, 01, 03, 02];

Td0[x] = Si[x].[0e, 09, 0d, 0b];
Td1[x] = Si[x].[0b, 0e, 09, 0d];
Td2[x] = Si[x].[0d, 0b, 0e, 09];
Td3[x] = Si[x].[09, 0d, 0b, 0e];
Td4[x] = Si[x].[01];
*/
//
//static const u32 Te0[256] = {
//    0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,
//
// Te0[0x00] = S[0x00].[02, 01, 01, 03] = 0x63.[02, 01, 01, 03]
//
// S[00] = 0x63.02 | 0x63.01 | 0x63.01 | 0x63.03
//       = 0xc6 | 0x63 | 0x63 |
//       = 0xc66363a5
//
// Te0[0x19] = 0xd4.[02, 01, 01, 03] = ...

// t-tables from OpenSSL
static const uint32_t Te0[256] = {
    0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,
    0xfff2f20dU, 0xd66b6bbdU, 0xde6f6fb1U, 0x91c5c554U,
    0x60303050U, 0x02010103U, 0xce6767a9U, 0x562b2b7dU,
    0xe7fefe19U, 0xb5d7d762U, 0x4dababe6U, 0xec76769aU,
    0x8fcaca45U, 0x1f82829dU, 0x89c9c940U, 0xfa7d7d87U,
    0xeffafa15U, 0xb25959ebU, 0x8e4747c9U, 0xfbf0f00bU,
    0x41adadecU, 0xb3d4d467U, 0x5fa2a2fdU, 0x45afafeaU,
    0x239c9cbfU, 0x53a4a4f7U, 0xe4727296U, 0x9bc0c05bU,
    0x75b7b7c2U, 0xe1fdfd1cU, 0x3d9393aeU, 0x4c26266aU,
    0x6c36365aU, 0x7e3f3f41U, 0xf5f7f702U, 0x83cccc4fU,
    0x6834345cU, 0x51a5a5f4U, 0xd1e5e534U, 0xf9f1f108U,
    0xe2717193U, 0xabd8d873U, 0x62313153U, 0x2a15153fU,
    0x0804040cU, 0x95c7c752U, 0x46232365U, 0x9dc3c35eU,
    0x30181828U, 0x379696a1U, 0x0a05050fU, 0x2f9a9ab5U,
    0x0e070709U, 0x24121236U, 0x1b80809bU, 0xdfe2e23dU,
    0xcdebeb26U, 0x4e272769U, 0x7fb2b2cdU, 0xea75759fU,
    0x1209091bU, 0x1d83839eU, 0x582c2c74U, 0x341a1a2eU,
    0x361b1b2dU, 0xdc6e6eb2U, 0xb45a5aeeU, 0x5ba0a0fbU,
    0xa45252f6U, 0x763b3b4dU, 0xb7d6d661U, 0x7db3b3ceU,
    0x5229297bU, 0xdde3e33eU, 0x5e2f2f71U, 0x13848497U,
    0xa65353f5U, 0xb9d1d168U, 0x00000000U, 0xc1eded2cU,
    0x40202060U, 0xe3fcfc1fU, 0x79b1b1c8U, 0xb65b5bedU,
    0xd46a6abeU, 0x8dcbcb46U, 0x67bebed9U, 0x7239394bU,
    0x944a4adeU, 0x984c4cd4U, 0xb05858e8U, 0x85cfcf4aU,
    0xbbd0d06bU, 0xc5efef2aU, 0x4faaaae5U, 0xedfbfb16U,
    0x864343c5U, 0x9a4d4dd7U, 0x66333355U, 0x11858594U,
    0x8a4545cfU, 0xe9f9f910U, 0x04020206U, 0xfe7f7f81U,
    0xa05050f0U, 0x783c3c44U, 0x259f9fbaU, 0x4ba8a8e3U,
    0xa25151f3U, 0x5da3a3feU, 0x804040c0U, 0x058f8f8aU,
    0x3f9292adU, 0x219d9dbcU, 0x70383848U, 0xf1f5f504U,
    0x63bcbcdfU, 0x77b6b6c1U, 0xafdada75U, 0x42212163U,
    0x20101030U, 0xe5ffff1aU, 0xfdf3f30eU, 0xbfd2d26dU,
    0x81cdcd4cU, 0x180c0c14U, 0x26131335U, 0xc3ecec2fU,
    0xbe5f5fe1U, 0x359797a2U, 0x884444ccU, 0x2e171739U,
    0x93c4c457U, 0x55a7a7f2U, 0xfc7e7e82U, 0x7a3d3d47U,
    0xc86464acU, 0xba5d5de7U, 0x3219192bU, 0xe6737395U,
    0xc06060a0U, 0x19818198U, 0x9e4f4fd1U, 0xa3dcdc7fU,
    0x44222266U, 0x542a2a7eU, 0x3b9090abU, 0x0b888883U,
    0x8c4646caU, 0xc7eeee29U, 0x6bb8b8d3U, 0x2814143cU,
    0xa7dede79U, 0xbc5e5ee2U, 0x160b0b1dU, 0xaddbdb76U,
    0xdbe0e03bU, 0x64323256U, 0x743a3a4eU, 0x140a0a1eU,
    0x924949dbU, 0x0c06060aU, 0x4824246cU, 0xb85c5ce4U,
    0x9fc2c25dU, 0xbdd3d36eU, 0x43acacefU, 0xc46262a6U,
    0x399191a8U, 0x319595a4U, 0xd3e4e437U, 0xf279798bU,
    0xd5e7e732U, 0x8bc8c843U, 0x6e373759U, 0xda6d6db7U,
    0x018d8d8cU, 0xb1d5d564U, 0x9c4e4ed2U, 0x49a9a9e0U,
    0xd86c6cb4U, 0xac5656faU, 0xf3f4f407U, 0xcfeaea25U,
    0xca6565afU, 0xf47a7a8eU, 0x47aeaee9U, 0x10080818U,
    0x6fbabad5U, 0xf0787888U, 0x4a25256fU, 0x5c2e2e72U,
    0x381c1c24U, 0x57a6a6f1U, 0x73b4b4c7U, 0x97c6c651U,
    0xcbe8e823U, 0xa1dddd7cU, 0xe874749cU, 0x3e1f1f21U,
    0x964b4bddU, 0x61bdbddcU, 0x0d8b8b86U, 0x0f8a8a85U,
    0xe0707090U, 0x7c3e3e42U, 0x71b5b5c4U, 0xcc6666aaU,
    0x904848d8U, 0x06030305U, 0xf7f6f601U, 0x1c0e0e12U,
    0xc26161a3U, 0x6a35355fU, 0xae5757f9U, 0x69b9b9d0U,
    0x17868691U, 0x99c1c158U, 0x3a1d1d27U, 0x279e9eb9U,
    0xd9e1e138U, 0xebf8f813U, 0x2b9898b3U, 0x22111133U,
    0xd26969bbU, 0xa9d9d970U, 0x078e8e89U, 0x339494a7U,
    0x2d9b9bb6U, 0x3c1e1e22U, 0x15878792U, 0xc9e9e920U,
    0x87cece49U, 0xaa5555ffU, 0x50282878U, 0xa5dfdf7aU,
    0x038c8c8fU, 0x59a1a1f8U, 0x09898980U, 0x1a0d0d17U,
    0x65bfbfdaU, 0xd7e6e631U, 0x844242c6U, 0xd06868b8U,
    0x824141c3U, 0x299999b0U, 0x5a2d2d77U, 0x1e0f0f11U,
    0x7bb0b0cbU, 0xa85454fcU, 0x6dbbbbd6U, 0x2c16163aU,
};
static const uint32_t Te1[256] = {
    0xa5c66363U, 0x84f87c7cU, 0x99ee7777U, 0x8df67b7bU,
    0x0dfff2f2U, 0xbdd66b6bU, 0xb1de6f6fU, 0x5491c5c5U,
    0x50603030U, 0x03020101U, 0xa9ce6767U, 0x7d562b2bU,
    0x19e7fefeU, 0x62b5d7d7U, 0xe64dababU, 0x9aec7676U,
    0x458fcacaU, 0x9d1f8282U, 0x4089c9c9U, 0x87fa7d7dU,
    0x15effafaU, 0xebb25959U, 0xc98e4747U, 0x0bfbf0f0U,
    0xec41adadU, 0x67b3d4d4U, 0xfd5fa2a2U, 0xea45afafU,
    0xbf239c9cU, 0xf753a4a4U, 0x96e47272U, 0x5b9bc0c0U,
    0xc275b7b7U, 0x1ce1fdfdU, 0xae3d9393U, 0x6a4c2626U,
    0x5a6c3636U, 0x417e3f3fU, 0x02f5f7f7U, 0x4f83ccccU,
    0x5c683434U, 0xf451a5a5U, 0x34d1e5e5U, 0x08f9f1f1U,
    0x93e27171U, 0x73abd8d8U, 0x53623131U, 0x3f2a1515U,
    0x0c080404U, 0x5295c7c7U, 0x65462323U, 0x5e9dc3c3U,
    0x28301818U, 0xa1379696U, 0x0f0a0505U, 0xb52f9a9aU,
    0x090e0707U, 0x36241212U, 0x9b1b8080U, 0x3ddfe2e2U,
    0x26cdebebU, 0x694e2727U, 0xcd7fb2b2U, 0x9fea7575U,
    0x1b120909U, 0x9e1d8383U, 0x74582c2cU, 0x2e341a1aU,
    0x2d361b1bU, 0xb2dc6e6eU, 0xeeb45a5aU, 0xfb5ba0a0U,
    0xf6a45252U, 0x4d763b3bU, 0x61b7d6d6U, 0xce7db3b3U,
    0x7b522929U, 0x3edde3e3U, 0x715e2f2fU, 0x97138484U,
    0xf5a65353U, 0x68b9d1d1U, 0x00000000U, 0x2cc1ededU,
    0x60402020U, 0x1fe3fcfcU, 0xc879b1b1U, 0xedb65b5bU,
    0xbed46a6aU, 0x468dcbcbU, 0xd967bebeU, 0x4b723939U,
    0xde944a4aU, 0xd4984c4cU, 0xe8b05858U, 0x4a85cfcfU,
    0x6bbbd0d0U, 0x2ac5efefU, 0xe54faaaaU, 0x16edfbfbU,
    0xc5864343U, 0xd79a4d4dU, 0x55663333U, 0x94118585U,
    0xcf8a4545U, 0x10e9f9f9U, 0x06040202U, 0x81fe7f7fU,
    0xf0a05050U, 0x44783c3cU, 0xba259f9fU, 0xe34ba8a8U,
    0xf3a25151U, 0xfe5da3a3U, 0xc0804040U, 0x8a058f8fU,
    0xad3f9292U, 0xbc219d9dU, 0x48703838U, 0x04f1f5f5U,
    0xdf63bcbcU, 0xc177b6b6U, 0x75afdadaU, 0x63422121U,
    0x30201010U, 0x1ae5ffffU, 0x0efdf3f3U, 0x6dbfd2d2U,
    0x4c81cdcdU, 0x14180c0cU, 0x35261313U, 0x2fc3ececU,
    0xe1be5f5fU, 0xa2359797U, 0xcc884444U, 0x392e1717U,
    0x5793c4c4U, 0xf255a7a7U, 0x82fc7e7eU, 0x477a3d3dU,
    0xacc86464U, 0xe7ba5d5dU, 0x2b321919U, 0x95e67373U,
    0xa0c06060U, 0x98198181U, 0xd19e4f4fU, 0x7fa3dcdcU,
    0x66442222U, 0x7e542a2aU, 0xab3b9090U, 0x830b8888U,
    0xca8c4646U, 0x29c7eeeeU, 0xd36bb8b8U, 0x3c281414U,
    0x79a7dedeU, 0xe2bc5e5eU, 0x1d160b0bU, 0x76addbdbU,
    0x3bdbe0e0U, 0x56643232U, 0x4e743a3aU, 0x1e140a0aU,
    0xdb924949U, 0x0a0c0606U, 0x6c482424U, 0xe4b85c5cU,
    0x5d9fc2c2U, 0x6ebdd3d3U, 0xef43acacU, 0xa6c46262U,
    0xa8399191U, 0xa4319595U, 0x37d3e4e4U, 0x8bf27979U,
    0x32d5e7e7U, 0x438bc8c8U, 0x596e3737U, 0xb7da6d6dU,
    0x8c018d8dU, 0x64b1d5d5U, 0xd29c4e4eU, 0xe049a9a9U,
    0xb4d86c6cU, 0xfaac5656U, 0x07f3f4f4U, 0x25cfeaeaU,
    0xafca6565U, 0x8ef47a7aU, 0xe947aeaeU, 0x18100808U,
    0xd56fbabaU, 0x88f07878U, 0x6f4a2525U, 0x725c2e2eU,
    0x24381c1cU, 0xf157a6a6U, 0xc773b4b4U, 0x5197c6c6U,
    0x23cbe8e8U, 0x7ca1ddddU, 0x9ce87474U, 0x213e1f1fU,
    0xdd964b4bU, 0xdc61bdbdU, 0x860d8b8bU, 0x850f8a8aU,
    0x90e07070U, 0x427c3e3eU, 0xc471b5b5U, 0xaacc6666U,
    0xd8904848U, 0x05060303U, 0x01f7f6f6U, 0x121c0e0eU,
    0xa3c26161U, 0x5f6a3535U, 0xf9ae5757U, 0xd069b9b9U,
    0x91178686U, 0x5899c1c1U, 0x273a1d1dU, 0xb9279e9eU,
    0x38d9e1e1U, 0x13ebf8f8U, 0xb32b9898U, 0x33221111U,
    0xbbd26969U, 0x70a9d9d9U, 0x89078e8eU, 0xa7339494U,
    0xb62d9b9bU, 0x223c1e1eU, 0x92158787U, 0x20c9e9e9U,
    0x4987ceceU, 0xffaa5555U, 0x78502828U, 0x7aa5dfdfU,
    0x8f038c8cU, 0xf859a1a1U, 0x80098989U, 0x171a0d0dU,
    0xda65bfbfU, 0x31d7e6e6U, 0xc6844242U, 0xb8d06868U,
    0xc3824141U, 0xb0299999U, 0x775a2d2dU, 0x111e0f0fU,
    0xcb7bb0b0U, 0xfca85454U, 0xd66dbbbbU, 0x3a2c1616U,
};
static const uint32_t Te2[256] = {
    0x63a5c663U, 0x7c84f87cU, 0x7799ee77U, 0x7b8df67bU,
    0xf20dfff2U, 0x6bbdd66bU, 0x6fb1de6fU, 0xc55491c5U,
    0x30506030U, 0x01030201U, 0x67a9ce67U, 0x2b7d562bU,
    0xfe19e7feU, 0xd762b5d7U, 0xabe64dabU, 0x769aec76U,
    0xca458fcaU, 0x829d1f82U, 0xc94089c9U, 0x7d87fa7dU,
    0xfa15effaU, 0x59ebb259U, 0x47c98e47U, 0xf00bfbf0U,
    0xadec41adU, 0xd467b3d4U, 0xa2fd5fa2U, 0xafea45afU,
    0x9cbf239cU, 0xa4f753a4U, 0x7296e472U, 0xc05b9bc0U,
    0xb7c275b7U, 0xfd1ce1fdU, 0x93ae3d93U, 0x266a4c26U,
    0x365a6c36U, 0x3f417e3fU, 0xf702f5f7U, 0xcc4f83ccU,
    0x345c6834U, 0xa5f451a5U, 0xe534d1e5U, 0xf108f9f1U,
    0x7193e271U, 0xd873abd8U, 0x31536231U, 0x153f2a15U,
    0x040c0804U, 0xc75295c7U, 0x23654623U, 0xc35e9dc3U,
    0x18283018U, 0x96a13796U, 0x050f0a05U, 0x9ab52f9aU,
    0x07090e07U, 0x12362412U, 0x809b1b80U, 0xe23ddfe2U,
    0xeb26cdebU, 0x27694e27U, 0xb2cd7fb2U, 0x759fea75U,
    0x091b1209U, 0x839e1d83U, 0x2c74582cU, 0x1a2e341aU,
    0x1b2d361bU, 0x6eb2dc6eU, 0x5aeeb45aU, 0xa0fb5ba0U,
    0x52f6a452U, 0x3b4d763bU, 0xd661b7d6U, 0xb3ce7db3U,
    0x297b5229U, 0xe33edde3U, 0x2f715e2fU, 0x84971384U,
    0x53f5a653U, 0xd168b9d1U, 0x00000000U, 0xed2cc1edU,
    0x20604020U, 0xfc1fe3fcU, 0xb1c879b1U, 0x5bedb65bU,
    0x6abed46aU, 0xcb468dcbU, 0xbed967beU, 0x394b7239U,
    0x4ade944aU, 0x4cd4984cU, 0x58e8b058U, 0xcf4a85cfU,
    0xd06bbbd0U, 0xef2ac5efU, 0xaae54faaU, 0xfb16edfbU,
    0x43c58643U, 0x4dd79a4dU, 0x33556633U, 0x85941185U,
    0x45cf8a45U, 0xf910e9f9U, 0x02060402U, 0x7f81fe7fU,
    0x50f0a050U, 0x3c44783cU, 0x9fba259fU, 0xa8e34ba8U,
    0x51f3a251U, 0xa3fe5da3U, 0x40c08040U, 0x8f8a058fU,
    0x92ad3f92U, 0x9dbc219dU, 0x38487038U, 0xf504f1f5U,
    0xbcdf63bcU, 0xb6c177b6U, 0xda75afdaU, 0x21634221U,
    0x10302010U, 0xff1ae5ffU, 0xf30efdf3U, 0xd26dbfd2U,
    0xcd4c81cdU, 0x0c14180cU, 0x13352613U, 0xec2fc3ecU,
    0x5fe1be5fU, 0x97a23597U, 0x44cc8844U, 0x17392e17U,
    0xc45793c4U, 0xa7f255a7U, 0x7e82fc7eU, 0x3d477a3dU,
    0x64acc864U, 0x5de7ba5dU, 0x192b3219U, 0x7395e673U,
    0x60a0c060U, 0x81981981U, 0x4fd19e4fU, 0xdc7fa3dcU,
    0x22664422U, 0x2a7e542aU, 0x90ab3b90U, 0x88830b88U,
    0x46ca8c46U, 0xee29c7eeU, 0xb8d36bb8U, 0x143c2814U,
    0xde79a7deU, 0x5ee2bc5eU, 0x0b1d160bU, 0xdb76addbU,
    0xe03bdbe0U, 0x32566432U, 0x3a4e743aU, 0x0a1e140aU,
    0x49db9249U, 0x060a0c06U, 0x246c4824U, 0x5ce4b85cU,
    0xc25d9fc2U, 0xd36ebdd3U, 0xacef43acU, 0x62a6c462U,
    0x91a83991U, 0x95a43195U, 0xe437d3e4U, 0x798bf279U,
    0xe732d5e7U, 0xc8438bc8U, 0x37596e37U, 0x6db7da6dU,
    0x8d8c018dU, 0xd564b1d5U, 0x4ed29c4eU, 0xa9e049a9U,
    0x6cb4d86cU, 0x56faac56U, 0xf407f3f4U, 0xea25cfeaU,
    0x65afca65U, 0x7a8ef47aU, 0xaee947aeU, 0x08181008U,
    0xbad56fbaU, 0x7888f078U, 0x256f4a25U, 0x2e725c2eU,
    0x1c24381cU, 0xa6f157a6U, 0xb4c773b4U, 0xc65197c6U,
    0xe823cbe8U, 0xdd7ca1ddU, 0x749ce874U, 0x1f213e1fU,
    0x4bdd964bU, 0xbddc61bdU, 0x8b860d8bU, 0x8a850f8aU,
    0x7090e070U, 0x3e427c3eU, 0xb5c471b5U, 0x66aacc66U,
    0x48d89048U, 0x03050603U, 0xf601f7f6U, 0x0e121c0eU,
    0x61a3c261U, 0x355f6a35U, 0x57f9ae57U, 0xb9d069b9U,
    0x86911786U, 0xc15899c1U, 0x1d273a1dU, 0x9eb9279eU,
    0xe138d9e1U, 0xf813ebf8U, 0x98b32b98U, 0x11332211U,
    0x69bbd269U, 0xd970a9d9U, 0x8e89078eU, 0x94a73394U,
    0x9bb62d9bU, 0x1e223c1eU, 0x87921587U, 0xe920c9e9U,
    0xce4987ceU, 0x55ffaa55U, 0x28785028U, 0xdf7aa5dfU,
    0x8c8f038cU, 0xa1f859a1U, 0x89800989U, 0x0d171a0dU,
    0xbfda65bfU, 0xe631d7e6U, 0x42c68442U, 0x68b8d068U,
    0x41c38241U, 0x99b02999U, 0x2d775a2dU, 0x0f111e0fU,
    0xb0cb7bb0U, 0x54fca854U, 0xbbd66dbbU, 0x163a2c16U,
};
static const uint32_t Te3[256] = {
    0x6363a5c6U, 0x7c7c84f8U, 0x777799eeU, 0x7b7b8df6U,
    0xf2f20dffU, 0x6b6bbdd6U, 0x6f6fb1deU, 0xc5c55491U,
    0x30305060U, 0x01010302U, 0x6767a9ceU, 0x2b2b7d56U,
    0xfefe19e7U, 0xd7d762b5U, 0xababe64dU, 0x76769aecU,
    0xcaca458fU, 0x82829d1fU, 0xc9c94089U, 0x7d7d87faU,
    0xfafa15efU, 0x5959ebb2U, 0x4747c98eU, 0xf0f00bfbU,
    0xadadec41U, 0xd4d467b3U, 0xa2a2fd5fU, 0xafafea45U,
    0x9c9cbf23U, 0xa4a4f753U, 0x727296e4U, 0xc0c05b9bU,
    0xb7b7c275U, 0xfdfd1ce1U, 0x9393ae3dU, 0x26266a4cU,
    0x36365a6cU, 0x3f3f417eU, 0xf7f702f5U, 0xcccc4f83U,
    0x34345c68U, 0xa5a5f451U, 0xe5e534d1U, 0xf1f108f9U,
    0x717193e2U, 0xd8d873abU, 0x31315362U, 0x15153f2aU,
    0x04040c08U, 0xc7c75295U, 0x23236546U, 0xc3c35e9dU,
    0x18182830U, 0x9696a137U, 0x05050f0aU, 0x9a9ab52fU,
    0x0707090eU, 0x12123624U, 0x80809b1bU, 0xe2e23ddfU,
    0xebeb26cdU, 0x2727694eU, 0xb2b2cd7fU, 0x75759feaU,
    0x09091b12U, 0x83839e1dU, 0x2c2c7458U, 0x1a1a2e34U,
    0x1b1b2d36U, 0x6e6eb2dcU, 0x5a5aeeb4U, 0xa0a0fb5bU,
    0x5252f6a4U, 0x3b3b4d76U, 0xd6d661b7U, 0xb3b3ce7dU,
    0x29297b52U, 0xe3e33eddU, 0x2f2f715eU, 0x84849713U,
    0x5353f5a6U, 0xd1d168b9U, 0x00000000U, 0xeded2cc1U,
    0x20206040U, 0xfcfc1fe3U, 0xb1b1c879U, 0x5b5bedb6U,
    0x6a6abed4U, 0xcbcb468dU, 0xbebed967U, 0x39394b72U,
    0x4a4ade94U, 0x4c4cd498U, 0x5858e8b0U, 0xcfcf4a85U,
    0xd0d06bbbU, 0xefef2ac5U, 0xaaaae54fU, 0xfbfb16edU,
    0x4343c586U, 0x4d4dd79aU, 0x33335566U, 0x85859411U,
    0x4545cf8aU, 0xf9f910e9U, 0x02020604U, 0x7f7f81feU,
    0x5050f0a0U, 0x3c3c4478U, 0x9f9fba25U, 0xa8a8e34bU,
    0x5151f3a2U, 0xa3a3fe5dU, 0x4040c080U, 0x8f8f8a05U,
    0x9292ad3fU, 0x9d9dbc21U, 0x38384870U, 0xf5f504f1U,
    0xbcbcdf63U, 0xb6b6c177U, 0xdada75afU, 0x21216342U,
    0x10103020U, 0xffff1ae5U, 0xf3f30efdU, 0xd2d26dbfU,
    0xcdcd4c81U, 0x0c0c1418U, 0x13133526U, 0xecec2fc3U,
    0x5f5fe1beU, 0x9797a235U, 0x4444cc88U, 0x1717392eU,
    0xc4c45793U, 0xa7a7f255U, 0x7e7e82fcU, 0x3d3d477aU,
    0x6464acc8U, 0x5d5de7baU, 0x19192b32U, 0x737395e6U,
    0x6060a0c0U, 0x81819819U, 0x4f4fd19eU, 0xdcdc7fa3U,
    0x22226644U, 0x2a2a7e54U, 0x9090ab3bU, 0x8888830bU,
    0x4646ca8cU, 0xeeee29c7U, 0xb8b8d36bU, 0x14143c28U,
    0xdede79a7U, 0x5e5ee2bcU, 0x0b0b1d16U, 0xdbdb76adU,
    0xe0e03bdbU, 0x32325664U, 0x3a3a4e74U, 0x0a0a1e14U,
    0x4949db92U, 0x06060a0cU, 0x24246c48U, 0x5c5ce4b8U,
    0xc2c25d9fU, 0xd3d36ebdU, 0xacacef43U, 0x6262a6c4U,
    0x9191a839U, 0x9595a431U, 0xe4e437d3U, 0x79798bf2U,
    0xe7e732d5U, 0xc8c8438bU, 0x3737596eU, 0x6d6db7daU,
    0x8d8d8c01U, 0xd5d564b1U, 0x4e4ed29cU, 0xa9a9e049U,
    0x6c6cb4d8U, 0x5656faacU, 0xf4f407f3U, 0xeaea25cfU,
    0x6565afcaU, 0x7a7a8ef4U, 0xaeaee947U, 0x08081810U,
    0xbabad56fU, 0x787888f0U, 0x25256f4aU, 0x2e2e725cU,
    0x1c1c2438U, 0xa6a6f157U, 0xb4b4c773U, 0xc6c65197U,
    0xe8e823cbU, 0xdddd7ca1U, 0x74749ce8U, 0x1f1f213eU,
    0x4b4bdd96U, 0xbdbddc61U, 0x8b8b860dU, 0x8a8a850fU,
    0x707090e0U, 0x3e3e427cU, 0xb5b5c471U, 0x6666aaccU,
    0x4848d890U, 0x03030506U, 0xf6f601f7U, 0x0e0e121cU,
    0x6161a3c2U, 0x35355f6aU, 0x5757f9aeU, 0xb9b9d069U,
    0x86869117U, 0xc1c15899U, 0x1d1d273aU, 0x9e9eb927U,
    0xe1e138d9U, 0xf8f813ebU, 0x9898b32bU, 0x11113322U,
    0x6969bbd2U, 0xd9d970a9U, 0x8e8e8907U, 0x9494a733U,
    0x9b9bb62dU, 0x1e1e223cU, 0x87879215U, 0xe9e920c9U,
    0xcece4987U, 0x5555ffaaU, 0x28287850U, 0xdfdf7aa5U,
    0x8c8c8f03U, 0xa1a1f859U, 0x89898009U, 0x0d0d171aU,
    0xbfbfda65U, 0xe6e631d7U, 0x4242c684U, 0x6868b8d0U,
    0x4141c382U, 0x9999b029U, 0x2d2d775aU, 0x0f0f111eU,
    0xb0b0cb7bU, 0x5454fca8U, 0xbbbbd66dU, 0x16163a2cU,
};

static const uint32_t Td0[256] = {
    0x51f4a750U, 0x7e416553U, 0x1a17a4c3U, 0x3a275e96U,
    0x3bab6bcbU, 0x1f9d45f1U, 0xacfa58abU, 0x4be30393U,
    0x2030fa55U, 0xad766df6U, 0x88cc7691U, 0xf5024c25U,
    0x4fe5d7fcU, 0xc52acbd7U, 0x26354480U, 0xb562a38fU,
    0xdeb15a49U, 0x25ba1b67U, 0x45ea0e98U, 0x5dfec0e1U,
    0xc32f7502U, 0x814cf012U, 0x8d4697a3U, 0x6bd3f9c6U,
    0x038f5fe7U, 0x15929c95U, 0xbf6d7aebU, 0x955259daU,
    0xd4be832dU, 0x587421d3U, 0x49e06929U, 0x8ec9c844U,
    0x75c2896aU, 0xf48e7978U, 0x99583e6bU, 0x27b971ddU,
    0xbee14fb6U, 0xf088ad17U, 0xc920ac66U, 0x7dce3ab4U,
    0x63df4a18U, 0xe51a3182U, 0x97513360U, 0x62537f45U,
    0xb16477e0U, 0xbb6bae84U, 0xfe81a01cU, 0xf9082b94U,
    0x70486858U, 0x8f45fd19U, 0x94de6c87U, 0x527bf8b7U,
    0xab73d323U, 0x724b02e2U, 0xe31f8f57U, 0x6655ab2aU,
    0xb2eb2807U, 0x2fb5c203U, 0x86c57b9aU, 0xd33708a5U,
    0x302887f2U, 0x23bfa5b2U, 0x02036abaU, 0xed16825cU,
    0x8acf1c2bU, 0xa779b492U, 0xf307f2f0U, 0x4e69e2a1U,
    0x65daf4cdU, 0x0605bed5U, 0xd134621fU, 0xc4a6fe8aU,
    0x342e539dU, 0xa2f355a0U, 0x058ae132U, 0xa4f6eb75U,
    0x0b83ec39U, 0x4060efaaU, 0x5e719f06U, 0xbd6e1051U,
    0x3e218af9U, 0x96dd063dU, 0xdd3e05aeU, 0x4de6bd46U,
    0x91548db5U, 0x71c45d05U, 0x0406d46fU, 0x605015ffU,
    0x1998fb24U, 0xd6bde997U, 0x894043ccU, 0x67d99e77U,
    0xb0e842bdU, 0x07898b88U, 0xe7195b38U, 0x79c8eedbU,
    0xa17c0a47U, 0x7c420fe9U, 0xf8841ec9U, 0x00000000U,
    0x09808683U, 0x322bed48U, 0x1e1170acU, 0x6c5a724eU,
    0xfd0efffbU, 0x0f853856U, 0x3daed51eU, 0x362d3927U,
    0x0a0fd964U, 0x685ca621U, 0x9b5b54d1U, 0x24362e3aU,
    0x0c0a67b1U, 0x9357e70fU, 0xb4ee96d2U, 0x1b9b919eU,
    0x80c0c54fU, 0x61dc20a2U, 0x5a774b69U, 0x1c121a16U,
    0xe293ba0aU, 0xc0a02ae5U, 0x3c22e043U, 0x121b171dU,
    0x0e090d0bU, 0xf28bc7adU, 0x2db6a8b9U, 0x141ea9c8U,
    0x57f11985U, 0xaf75074cU, 0xee99ddbbU, 0xa37f60fdU,
    0xf701269fU, 0x5c72f5bcU, 0x44663bc5U, 0x5bfb7e34U,
    0x8b432976U, 0xcb23c6dcU, 0xb6edfc68U, 0xb8e4f163U,
    0xd731dccaU, 0x42638510U, 0x13972240U, 0x84c61120U,
    0x854a247dU, 0xd2bb3df8U, 0xaef93211U, 0xc729a16dU,
    0x1d9e2f4bU, 0xdcb230f3U, 0x0d8652ecU, 0x77c1e3d0U,
    0x2bb3166cU, 0xa970b999U, 0x119448faU, 0x47e96422U,
    0xa8fc8cc4U, 0xa0f03f1aU, 0x567d2cd8U, 0x223390efU,
    0x87494ec7U, 0xd938d1c1U, 0x8ccaa2feU, 0x98d40b36U,
    0xa6f581cfU, 0xa57ade28U, 0xdab78e26U, 0x3fadbfa4U,
    0x2c3a9de4U, 0x5078920dU, 0x6a5fcc9bU, 0x547e4662U,
    0xf68d13c2U, 0x90d8b8e8U, 0x2e39f75eU, 0x82c3aff5U,
    0x9f5d80beU, 0x69d0937cU, 0x6fd52da9U, 0xcf2512b3U,
    0xc8ac993bU, 0x10187da7U, 0xe89c636eU, 0xdb3bbb7bU,
    0xcd267809U, 0x6e5918f4U, 0xec9ab701U, 0x834f9aa8U,
    0xe6956e65U, 0xaaffe67eU, 0x21bccf08U, 0xef15e8e6U,
    0xbae79bd9U, 0x4a6f36ceU, 0xea9f09d4U, 0x29b07cd6U,
    0x31a4b2afU, 0x2a3f2331U, 0xc6a59430U, 0x35a266c0U,
    0x744ebc37U, 0xfc82caa6U, 0xe090d0b0U, 0x33a7d815U,
    0xf104984aU, 0x41ecdaf7U, 0x7fcd500eU, 0x1791f62fU,
    0x764dd68dU, 0x43efb04dU, 0xccaa4d54U, 0xe49604dfU,
    0x9ed1b5e3U, 0x4c6a881bU, 0xc12c1fb8U, 0x4665517fU,
    0x9d5eea04U, 0x018c355dU, 0xfa877473U, 0xfb0b412eU,
    0xb3671d5aU, 0x92dbd252U, 0xe9105633U, 0x6dd64713U,
    0x9ad7618cU, 0x37a10c7aU, 0x59f8148eU, 0xeb133c89U,
    0xcea927eeU, 0xb761c935U, 0xe11ce5edU, 0x7a47b13cU,
    0x9cd2df59U, 0x55f2733fU, 0x1814ce79U, 0x73c737bfU,
    0x53f7cdeaU, 0x5ffdaa5bU, 0xdf3d6f14U, 0x7844db86U,
    0xcaaff381U, 0xb968c43eU, 0x3824342cU, 0xc2a3405fU,
    0x161dc372U, 0xbce2250cU, 0x283c498bU, 0xff0d9541U,
    0x39a80171U, 0x080cb3deU, 0xd8b4e49cU, 0x6456c190U,
    0x7bcb8461U, 0xd532b670U, 0x486c5c74U, 0xd0b85742U,
};
static const uint32_t Td1[256] = {
    0x5051f4a7U, 0x537e4165U, 0xc31a17a4U, 0x963a275eU,
    0xcb3bab6bU, 0xf11f9d45U, 0xabacfa58U, 0x934be303U,
    0x552030faU, 0xf6ad766dU, 0x9188cc76U, 0x25f5024cU,
    0xfc4fe5d7U, 0xd7c52acbU, 0x80263544U, 0x8fb562a3U,
    0x49deb15aU, 0x6725ba1bU, 0x9845ea0eU, 0xe15dfec0U,
    0x02c32f75U, 0x12814cf0U, 0xa38d4697U, 0xc66bd3f9U,
    0xe7038f5fU, 0x9515929cU, 0xebbf6d7aU, 0xda955259U,
    0x2dd4be83U, 0xd3587421U, 0x2949e069U, 0x448ec9c8U,
    0x6a75c289U, 0x78f48e79U, 0x6b99583eU, 0xdd27b971U,
    0xb6bee14fU, 0x17f088adU, 0x66c920acU, 0xb47dce3aU,
    0x1863df4aU, 0x82e51a31U, 0x60975133U, 0x4562537fU,
    0xe0b16477U, 0x84bb6baeU, 0x1cfe81a0U, 0x94f9082bU,
    0x58704868U, 0x198f45fdU, 0x8794de6cU, 0xb7527bf8U,
    0x23ab73d3U, 0xe2724b02U, 0x57e31f8fU, 0x2a6655abU,
    0x07b2eb28U, 0x032fb5c2U, 0x9a86c57bU, 0xa5d33708U,
    0xf2302887U, 0xb223bfa5U, 0xba02036aU, 0x5ced1682U,
    0x2b8acf1cU, 0x92a779b4U, 0xf0f307f2U, 0xa14e69e2U,
    0xcd65daf4U, 0xd50605beU, 0x1fd13462U, 0x8ac4a6feU,
    0x9d342e53U, 0xa0a2f355U, 0x32058ae1U, 0x75a4f6ebU,
    0x390b83ecU, 0xaa4060efU, 0x065e719fU, 0x51bd6e10U,
    0xf93e218aU, 0x3d96dd06U, 0xaedd3e05U, 0x464de6bdU,
    0xb591548dU, 0x0571c45dU, 0x6f0406d4U, 0xff605015U,
    0x241998fbU, 0x97d6bde9U, 0xcc894043U, 0x7767d99eU,
    0xbdb0e842U, 0x8807898bU, 0x38e7195bU, 0xdb79c8eeU,
    0x47a17c0aU, 0xe97c420fU, 0xc9f8841eU, 0x00000000U,
    0x83098086U, 0x48322bedU, 0xac1e1170U, 0x4e6c5a72U,
    0xfbfd0effU, 0x560f8538U, 0x1e3daed5U, 0x27362d39U,
    0x640a0fd9U, 0x21685ca6U, 0xd19b5b54U, 0x3a24362eU,
    0xb10c0a67U, 0x0f9357e7U, 0xd2b4ee96U, 0x9e1b9b91U,
    0x4f80c0c5U, 0xa261dc20U, 0x695a774bU, 0x161c121aU,
    0x0ae293baU, 0xe5c0a02aU, 0x433c22e0U, 0x1d121b17U,
    0x0b0e090dU, 0xadf28bc7U, 0xb92db6a8U, 0xc8141ea9U,
    0x8557f119U, 0x4caf7507U, 0xbbee99ddU, 0xfda37f60U,
    0x9ff70126U, 0xbc5c72f5U, 0xc544663bU, 0x345bfb7eU,
    0x768b4329U, 0xdccb23c6U, 0x68b6edfcU, 0x63b8e4f1U,
    0xcad731dcU, 0x10426385U, 0x40139722U, 0x2084c611U,
    0x7d854a24U, 0xf8d2bb3dU, 0x11aef932U, 0x6dc729a1U,
    0x4b1d9e2fU, 0xf3dcb230U, 0xec0d8652U, 0xd077c1e3U,
    0x6c2bb316U, 0x99a970b9U, 0xfa119448U, 0x2247e964U,
    0xc4a8fc8cU, 0x1aa0f03fU, 0xd8567d2cU, 0xef223390U,
    0xc787494eU, 0xc1d938d1U, 0xfe8ccaa2U, 0x3698d40bU,
    0xcfa6f581U, 0x28a57adeU, 0x26dab78eU, 0xa43fadbfU,
    0xe42c3a9dU, 0x0d507892U, 0x9b6a5fccU, 0x62547e46U,
    0xc2f68d13U, 0xe890d8b8U, 0x5e2e39f7U, 0xf582c3afU,
    0xbe9f5d80U, 0x7c69d093U, 0xa96fd52dU, 0xb3cf2512U,
    0x3bc8ac99U, 0xa710187dU, 0x6ee89c63U, 0x7bdb3bbbU,
    0x09cd2678U, 0xf46e5918U, 0x01ec9ab7U, 0xa8834f9aU,
    0x65e6956eU, 0x7eaaffe6U, 0x0821bccfU, 0xe6ef15e8U,
    0xd9bae79bU, 0xce4a6f36U, 0xd4ea9f09U, 0xd629b07cU,
    0xaf31a4b2U, 0x312a3f23U, 0x30c6a594U, 0xc035a266U,
    0x37744ebcU, 0xa6fc82caU, 0xb0e090d0U, 0x1533a7d8U,
    0x4af10498U, 0xf741ecdaU, 0x0e7fcd50U, 0x2f1791f6U,
    0x8d764dd6U, 0x4d43efb0U, 0x54ccaa4dU, 0xdfe49604U,
    0xe39ed1b5U, 0x1b4c6a88U, 0xb8c12c1fU, 0x7f466551U,
    0x049d5eeaU, 0x5d018c35U, 0x73fa8774U, 0x2efb0b41U,
    0x5ab3671dU, 0x5292dbd2U, 0x33e91056U, 0x136dd647U,
    0x8c9ad761U, 0x7a37a10cU, 0x8e59f814U, 0x89eb133cU,
    0xeecea927U, 0x35b761c9U, 0xede11ce5U, 0x3c7a47b1U,
    0x599cd2dfU, 0x3f55f273U, 0x791814ceU, 0xbf73c737U,
    0xea53f7cdU, 0x5b5ffdaaU, 0x14df3d6fU, 0x867844dbU,
    0x81caaff3U, 0x3eb968c4U, 0x2c382434U, 0x5fc2a340U,
    0x72161dc3U, 0x0cbce225U, 0x8b283c49U, 0x41ff0d95U,
    0x7139a801U, 0xde080cb3U, 0x9cd8b4e4U, 0x906456c1U,
    0x617bcb84U, 0x70d532b6U, 0x74486c5cU, 0x42d0b857U,
};
static const uint32_t Td2[256] = {
    0xa75051f4U, 0x65537e41U, 0xa4c31a17U, 0x5e963a27U,
    0x6bcb3babU, 0x45f11f9dU, 0x58abacfaU, 0x03934be3U,
    0xfa552030U, 0x6df6ad76U, 0x769188ccU, 0x4c25f502U,
    0xd7fc4fe5U, 0xcbd7c52aU, 0x44802635U, 0xa38fb562U,
    0x5a49deb1U, 0x1b6725baU, 0x0e9845eaU, 0xc0e15dfeU,
    0x7502c32fU, 0xf012814cU, 0x97a38d46U, 0xf9c66bd3U,
    0x5fe7038fU, 0x9c951592U, 0x7aebbf6dU, 0x59da9552U,
    0x832dd4beU, 0x21d35874U, 0x692949e0U, 0xc8448ec9U,
    0x896a75c2U, 0x7978f48eU, 0x3e6b9958U, 0x71dd27b9U,
    0x4fb6bee1U, 0xad17f088U, 0xac66c920U, 0x3ab47dceU,
    0x4a1863dfU, 0x3182e51aU, 0x33609751U, 0x7f456253U,
    0x77e0b164U, 0xae84bb6bU, 0xa01cfe81U, 0x2b94f908U,
    0x68587048U, 0xfd198f45U, 0x6c8794deU, 0xf8b7527bU,
    0xd323ab73U, 0x02e2724bU, 0x8f57e31fU, 0xab2a6655U,
    0x2807b2ebU, 0xc2032fb5U, 0x7b9a86c5U, 0x08a5d337U,
    0x87f23028U, 0xa5b223bfU, 0x6aba0203U, 0x825ced16U,
    0x1c2b8acfU, 0xb492a779U, 0xf2f0f307U, 0xe2a14e69U,
    0xf4cd65daU, 0xbed50605U, 0x621fd134U, 0xfe8ac4a6U,
    0x539d342eU, 0x55a0a2f3U, 0xe132058aU, 0xeb75a4f6U,
    0xec390b83U, 0xefaa4060U, 0x9f065e71U, 0x1051bd6eU,
    0x8af93e21U, 0x063d96ddU, 0x05aedd3eU, 0xbd464de6U,
    0x8db59154U, 0x5d0571c4U, 0xd46f0406U, 0x15ff6050U,
    0xfb241998U, 0xe997d6bdU, 0x43cc8940U, 0x9e7767d9U,
    0x42bdb0e8U, 0x8b880789U, 0x5b38e719U, 0xeedb79c8U,
    0x0a47a17cU, 0x0fe97c42U, 0x1ec9f884U, 0x00000000U,
    0x86830980U, 0xed48322bU, 0x70ac1e11U, 0x724e6c5aU,
    0xfffbfd0eU, 0x38560f85U, 0xd51e3daeU, 0x3927362dU,
    0xd9640a0fU, 0xa621685cU, 0x54d19b5bU, 0x2e3a2436U,
    0x67b10c0aU, 0xe70f9357U, 0x96d2b4eeU, 0x919e1b9bU,
    0xc54f80c0U, 0x20a261dcU, 0x4b695a77U, 0x1a161c12U,
    0xba0ae293U, 0x2ae5c0a0U, 0xe0433c22U, 0x171d121bU,
    0x0d0b0e09U, 0xc7adf28bU, 0xa8b92db6U, 0xa9c8141eU,
    0x198557f1U, 0x074caf75U, 0xddbbee99U, 0x60fda37fU,
    0x269ff701U, 0xf5bc5c72U, 0x3bc54466U, 0x7e345bfbU,
    0x29768b43U, 0xc6dccb23U, 0xfc68b6edU, 0xf163b8e4U,
    0xdccad731U, 0x85104263U, 0x22401397U, 0x112084c6U,
    0x247d854aU, 0x3df8d2bbU, 0x3211aef9U, 0xa16dc729U,
    0x2f4b1d9eU, 0x30f3dcb2U, 0x52ec0d86U, 0xe3d077c1U,
    0x166c2bb3U, 0xb999a970U, 0x48fa1194U, 0x642247e9U,
    0x8cc4a8fcU, 0x3f1aa0f0U, 0x2cd8567dU, 0x90ef2233U,
    0x4ec78749U, 0xd1c1d938U, 0xa2fe8ccaU, 0x0b3698d4U,
    0x81cfa6f5U, 0xde28a57aU, 0x8e26dab7U, 0xbfa43fadU,
    0x9de42c3aU, 0x920d5078U, 0xcc9b6a5fU, 0x4662547eU,
    0x13c2f68dU, 0xb8e890d8U, 0xf75e2e39U, 0xaff582c3U,
    0x80be9f5dU, 0x937c69d0U, 0x2da96fd5U, 0x12b3cf25U,
    0x993bc8acU, 0x7da71018U, 0x636ee89cU, 0xbb7bdb3bU,
    0x7809cd26U, 0x18f46e59U, 0xb701ec9aU, 0x9aa8834fU,
    0x6e65e695U, 0xe67eaaffU, 0xcf0821bcU, 0xe8e6ef15U,
    0x9bd9bae7U, 0x36ce4a6fU, 0x09d4ea9fU, 0x7cd629b0U,
    0xb2af31a4U, 0x23312a3fU, 0x9430c6a5U, 0x66c035a2U,
    0xbc37744eU, 0xcaa6fc82U, 0xd0b0e090U, 0xd81533a7U,
    0x984af104U, 0xdaf741ecU, 0x500e7fcdU, 0xf62f1791U,
    0xd68d764dU, 0xb04d43efU, 0x4d54ccaaU, 0x04dfe496U,
    0xb5e39ed1U, 0x881b4c6aU, 0x1fb8c12cU, 0x517f4665U,
    0xea049d5eU, 0x355d018cU, 0x7473fa87U, 0x412efb0bU,
    0x1d5ab367U, 0xd25292dbU, 0x5633e910U, 0x47136dd6U,
    0x618c9ad7U, 0x0c7a37a1U, 0x148e59f8U, 0x3c89eb13U,
    0x27eecea9U, 0xc935b761U, 0xe5ede11cU, 0xb13c7a47U,
    0xdf599cd2U, 0x733f55f2U, 0xce791814U, 0x37bf73c7U,
    0xcdea53f7U, 0xaa5b5ffdU, 0x6f14df3dU, 0xdb867844U,
    0xf381caafU, 0xc43eb968U, 0x342c3824U, 0x405fc2a3U,
    0xc372161dU, 0x250cbce2U, 0x498b283cU, 0x9541ff0dU,
    0x017139a8U, 0xb3de080cU, 0xe49cd8b4U, 0xc1906456U,
    0x84617bcbU, 0xb670d532U, 0x5c74486cU, 0x5742d0b8U,
};
static const uint32_t Td3[256] = {
    0xf4a75051U, 0x4165537eU, 0x17a4c31aU, 0x275e963aU,
    0xab6bcb3bU, 0x9d45f11fU, 0xfa58abacU, 0xe303934bU,
    0x30fa5520U, 0x766df6adU, 0xcc769188U, 0x024c25f5U,
    0xe5d7fc4fU, 0x2acbd7c5U, 0x35448026U, 0x62a38fb5U,
    0xb15a49deU, 0xba1b6725U, 0xea0e9845U, 0xfec0e15dU,
    0x2f7502c3U, 0x4cf01281U, 0x4697a38dU, 0xd3f9c66bU,
    0x8f5fe703U, 0x929c9515U, 0x6d7aebbfU, 0x5259da95U,
    0xbe832dd4U, 0x7421d358U, 0xe0692949U, 0xc9c8448eU,
    0xc2896a75U, 0x8e7978f4U, 0x583e6b99U, 0xb971dd27U,
    0xe14fb6beU, 0x88ad17f0U, 0x20ac66c9U, 0xce3ab47dU,
    0xdf4a1863U, 0x1a3182e5U, 0x51336097U, 0x537f4562U,
    0x6477e0b1U, 0x6bae84bbU, 0x81a01cfeU, 0x082b94f9U,
    0x48685870U, 0x45fd198fU, 0xde6c8794U, 0x7bf8b752U,
    0x73d323abU, 0x4b02e272U, 0x1f8f57e3U, 0x55ab2a66U,
    0xeb2807b2U, 0xb5c2032fU, 0xc57b9a86U, 0x3708a5d3U,
    0x2887f230U, 0xbfa5b223U, 0x036aba02U, 0x16825cedU,
    0xcf1c2b8aU, 0x79b492a7U, 0x07f2f0f3U, 0x69e2a14eU,
    0xdaf4cd65U, 0x05bed506U, 0x34621fd1U, 0xa6fe8ac4U,
    0x2e539d34U, 0xf355a0a2U, 0x8ae13205U, 0xf6eb75a4U,
    0x83ec390bU, 0x60efaa40U, 0x719f065eU, 0x6e1051bdU,
    0x218af93eU, 0xdd063d96U, 0x3e05aeddU, 0xe6bd464dU,
    0x548db591U, 0xc45d0571U, 0x06d46f04U, 0x5015ff60U,
    0x98fb2419U, 0xbde997d6U, 0x4043cc89U, 0xd99e7767U,
    0xe842bdb0U, 0x898b8807U, 0x195b38e7U, 0xc8eedb79U,
    0x7c0a47a1U, 0x420fe97cU, 0x841ec9f8U, 0x00000000U,
    0x80868309U, 0x2bed4832U, 0x1170ac1eU, 0x5a724e6cU,
    0x0efffbfdU, 0x8538560fU, 0xaed51e3dU, 0x2d392736U,
    0x0fd9640aU, 0x5ca62168U, 0x5b54d19bU, 0x362e3a24U,
    0x0a67b10cU, 0x57e70f93U, 0xee96d2b4U, 0x9b919e1bU,
    0xc0c54f80U, 0xdc20a261U, 0x774b695aU, 0x121a161cU,
    0x93ba0ae2U, 0xa02ae5c0U, 0x22e0433cU, 0x1b171d12U,
    0x090d0b0eU, 0x8bc7adf2U, 0xb6a8b92dU, 0x1ea9c814U,
    0xf1198557U, 0x75074cafU, 0x99ddbbeeU, 0x7f60fda3U,
    0x01269ff7U, 0x72f5bc5cU, 0x663bc544U, 0xfb7e345bU,
    0x4329768bU, 0x23c6dccbU, 0xedfc68b6U, 0xe4f163b8U,
    0x31dccad7U, 0x63851042U, 0x97224013U, 0xc6112084U,
    0x4a247d85U, 0xbb3df8d2U, 0xf93211aeU, 0x29a16dc7U,
    0x9e2f4b1dU, 0xb230f3dcU, 0x8652ec0dU, 0xc1e3d077U,
    0xb3166c2bU, 0x70b999a9U, 0x9448fa11U, 0xe9642247U,
    0xfc8cc4a8U, 0xf03f1aa0U, 0x7d2cd856U, 0x3390ef22U,
    0x494ec787U, 0x38d1c1d9U, 0xcaa2fe8cU, 0xd40b3698U,
    0xf581cfa6U, 0x7ade28a5U, 0xb78e26daU, 0xadbfa43fU,
    0x3a9de42cU, 0x78920d50U, 0x5fcc9b6aU, 0x7e466254U,
    0x8d13c2f6U, 0xd8b8e890U, 0x39f75e2eU, 0xc3aff582U,
    0x5d80be9fU, 0xd0937c69U, 0xd52da96fU, 0x2512b3cfU,
    0xac993bc8U, 0x187da710U, 0x9c636ee8U, 0x3bbb7bdbU,
    0x267809cdU, 0x5918f46eU, 0x9ab701ecU, 0x4f9aa883U,
    0x956e65e6U, 0xffe67eaaU, 0xbccf0821U, 0x15e8e6efU,
    0xe79bd9baU, 0x6f36ce4aU, 0x9f09d4eaU, 0xb07cd629U,
    0xa4b2af31U, 0x3f23312aU, 0xa59430c6U, 0xa266c035U,
    0x4ebc3774U, 0x82caa6fcU, 0x90d0b0e0U, 0xa7d81533U,
    0x04984af1U, 0xecdaf741U, 0xcd500e7fU, 0x91f62f17U,
    0x4dd68d76U, 0xefb04d43U, 0xaa4d54ccU, 0x9604dfe4U,
    0xd1b5e39eU, 0x6a881b4cU, 0x2c1fb8c1U, 0x65517f46U,
    0x5eea049dU, 0x8c355d01U, 0x877473faU, 0x0b412efbU,
    0x671d5ab3U, 0xdbd25292U, 0x105633e9U, 0xd647136dU,
    0xd7618c9aU, 0xa10c7a37U, 0xf8148e59U, 0x133c89ebU,
    0xa927eeceU, 0x61c935b7U, 0x1ce5ede1U, 0x47b13c7aU,
    0xd2df599cU, 0xf2733f55U, 0x14ce7918U, 0xc737bf73U,
    0xf7cdea53U, 0xfdaa5b5fU, 0x3d6f14dfU, 0x44db8678U,
    0xaff381caU, 0x68c43eb9U, 0x24342c38U, 0xa3405fc2U,
    0x1dc37216U, 0xe2250cbcU, 0x3c498b28U, 0x0d9541ffU,
    0xa8017139U, 0x0cb3de08U, 0xb4e49cd8U, 0x56c19064U,
    0xcb84617bU, 0x32b670d5U, 0x6c5c7448U, 0xb85742d0U,
};
static const uint8_t Td4[256] = {
    0x52U, 0x09U, 0x6aU, 0xd5U, 0x30U, 0x36U, 0xa5U, 0x38U,
    0xbfU, 0x40U, 0xa3U, 0x9eU, 0x81U, 0xf3U, 0xd7U, 0xfbU,
    0x7cU, 0xe3U, 0x39U, 0x82U, 0x9bU, 0x2fU, 0xffU, 0x87U,
    0x34U, 0x8eU, 0x43U, 0x44U, 0xc4U, 0xdeU, 0xe9U, 0xcbU,
    0x54U, 0x7bU, 0x94U, 0x32U, 0xa6U, 0xc2U, 0x23U, 0x3dU,
    0xeeU, 0x4cU, 0x95U, 0x0bU, 0x42U, 0xfaU, 0xc3U, 0x4eU,
    0x08U, 0x2eU, 0xa1U, 0x66U, 0x28U, 0xd9U, 0x24U, 0xb2U,
    0x76U, 0x5bU, 0xa2U, 0x49U, 0x6dU, 0x8bU, 0xd1U, 0x25U,
    0x72U, 0xf8U, 0xf6U, 0x64U, 0x86U, 0x68U, 0x98U, 0x16U,
    0xd4U, 0xa4U, 0x5cU, 0xccU, 0x5dU, 0x65U, 0xb6U, 0x92U,
    0x6cU, 0x70U, 0x48U, 0x50U, 0xfdU, 0xedU, 0xb9U, 0xdaU,
    0x5eU, 0x15U, 0x46U, 0x57U, 0xa7U, 0x8dU, 0x9dU, 0x84U,
    0x90U, 0xd8U, 0xabU, 0x00U, 0x8cU, 0xbcU, 0xd3U, 0x0aU,
    0xf7U, 0xe4U, 0x58U, 0x05U, 0xb8U, 0xb3U, 0x45U, 0x06U,
    0xd0U, 0x2cU, 0x1eU, 0x8fU, 0xcaU, 0x3fU, 0x0fU, 0x02U,
    0xc1U, 0xafU, 0xbdU, 0x03U, 0x01U, 0x13U, 0x8aU, 0x6bU,
    0x3aU, 0x91U, 0x11U, 0x41U, 0x4fU, 0x67U, 0xdcU, 0xeaU,
    0x97U, 0xf2U, 0xcfU, 0xceU, 0xf0U, 0xb4U, 0xe6U, 0x73U,
    0x96U, 0xacU, 0x74U, 0x22U, 0xe7U, 0xadU, 0x35U, 0x85U,
    0xe2U, 0xf9U, 0x37U, 0xe8U, 0x1cU, 0x75U, 0xdfU, 0x6eU,
    0x47U, 0xf1U, 0x1aU, 0x71U, 0x1dU, 0x29U, 0xc5U, 0x89U,
    0x6fU, 0xb7U, 0x62U, 0x0eU, 0xaaU, 0x18U, 0xbeU, 0x1bU,
    0xfcU, 0x56U, 0x3eU, 0x4bU, 0xc6U, 0xd2U, 0x79U, 0x20U,
    0x9aU, 0xdbU, 0xc0U, 0xfeU, 0x78U, 0xcdU, 0x5aU, 0xf4U,
    0x1fU, 0xddU, 0xa8U, 0x33U, 0x88U, 0x07U, 0xc7U, 0x31U,
    0xb1U, 0x12U, 0x10U, 0x59U, 0x27U, 0x80U, 0xecU, 0x5fU,
    0x60U, 0x51U, 0x7fU, 0xa9U, 0x19U, 0xb5U, 0x4aU, 0x0dU,
    0x2dU, 0xe5U, 0x7aU, 0x9fU, 0x93U, 0xc9U, 0x9cU, 0xefU,
    0xa0U, 0xe0U, 0x3bU, 0x4dU, 0xaeU, 0x2aU, 0xf5U, 0xb0U,
    0xc8U, 0xebU, 0xbbU, 0x3cU, 0x83U, 0x53U, 0x99U, 0x61U,
    0x17U, 0x2bU, 0x04U, 0x7eU, 0xbaU, 0x77U, 0xd6U, 0x26U,
    0xe1U, 0x69U, 0x14U, 0x63U, 0x55U, 0x21U, 0x0cU, 0x7dU,
};
static const uint32_t rcon[] = {
    0x01000000, 0x02000000, 0x04000000, 0x08000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000,
    0x1B000000, 0x36000000, /* for 128-bit blocks, Rijndael never uses more than 10 rcon values */
};


static const uint32_t Te0_be[256] = {
     0xa56363c6U, 0x847c7cf8U, 0x997777eeU, 0x8d7b7bf6U,
     0x0df2f2ffU, 0xbd6b6bd6U, 0xb16f6fdeU, 0x54c5c591U,
     0x50303060U, 0x03010102U, 0xa96767ceU, 0x7d2b2b56U,
     0x19fefee7U, 0x62d7d7b5U, 0xe6abab4dU, 0x9a7676ecU,
     0x45caca8fU, 0x9d82821fU, 0x40c9c989U, 0x877d7dfaU,
     0x15fafaefU, 0xeb5959b2U, 0xc947478eU, 0x0bf0f0fbU,
     0xecadad41U, 0x67d4d4b3U, 0xfda2a25fU, 0xeaafaf45U,
     0xbf9c9c23U, 0xf7a4a453U, 0x967272e4U, 0x5bc0c09bU,
     0xc2b7b775U, 0x1cfdfde1U, 0xae93933dU, 0x6a26264cU,
     0x5a36366cU, 0x413f3f7eU, 0x02f7f7f5U, 0x4fcccc83U,
     0x5c343468U, 0xf4a5a551U, 0x34e5e5d1U, 0x08f1f1f9U,
     0x937171e2U, 0x73d8d8abU, 0x53313162U, 0x3f15152aU,
     0x0c040408U, 0x52c7c795U, 0x65232346U, 0x5ec3c39dU,
     0x28181830U, 0xa1969637U, 0x0f05050aU, 0xb59a9a2fU,
     0x0907070eU, 0x36121224U, 0x9b80801bU, 0x3de2e2dfU,
     0x26ebebcdU, 0x6927274eU, 0xcdb2b27fU, 0x9f7575eaU,
     0x1b090912U, 0x9e83831dU, 0x742c2c58U, 0x2e1a1a34U,
     0x2d1b1b36U, 0xb26e6edcU, 0xee5a5ab4U, 0xfba0a05bU,
     0xf65252a4U, 0x4d3b3b76U, 0x61d6d6b7U, 0xceb3b37dU,
     0x7b292952U, 0x3ee3e3ddU, 0x712f2f5eU, 0x97848413U,
     0xf55353a6U, 0x68d1d1b9U, 0x00000000U, 0x2cededc1U,
     0x60202040U, 0x1ffcfce3U, 0xc8b1b179U, 0xed5b5bb6U,
     0xbe6a6ad4U, 0x46cbcb8dU, 0xd9bebe67U, 0x4b393972U,
     0xde4a4a94U, 0xd44c4c98U, 0xe85858b0U, 0x4acfcf85U,
     0x6bd0d0bbU, 0x2aefefc5U, 0xe5aaaa4fU, 0x16fbfbedU,
     0xc5434386U, 0xd74d4d9aU, 0x55333366U, 0x94858511U,
     0xcf45458aU, 0x10f9f9e9U, 0x06020204U, 0x817f7ffeU,
     0xf05050a0U, 0x443c3c78U, 0xba9f9f25U, 0xe3a8a84bU,
     0xf35151a2U, 0xfea3a35dU, 0xc0404080U, 0x8a8f8f05U,
     0xad92923fU, 0xbc9d9d21U, 0x48383870U, 0x04f5f5f1U,
     0xdfbcbc63U, 0xc1b6b677U, 0x75dadaafU, 0x63212142U,
     0x30101020U, 0x1affffe5U, 0x0ef3f3fdU, 0x6dd2d2bfU,
     0x4ccdcd81U, 0x140c0c18U, 0x35131326U, 0x2fececc3U,
     0xe15f5fbeU, 0xa2979735U, 0xcc444488U, 0x3917172eU,
     0x57c4c493U, 0xf2a7a755U, 0x827e7efcU, 0x473d3d7aU,
     0xac6464c8U, 0xe75d5dbaU, 0x2b191932U, 0x957373e6U,
     0xa06060c0U, 0x98818119U, 0xd14f4f9eU, 0x7fdcdca3U,
     0x66222244U, 0x7e2a2a54U, 0xab90903bU, 0x8388880bU,
     0xca46468cU, 0x29eeeec7U, 0xd3b8b86bU, 0x3c141428U,
     0x79dedea7U, 0xe25e5ebcU, 0x1d0b0b16U, 0x76dbdbadU,
     0x3be0e0dbU, 0x56323264U, 0x4e3a3a74U, 0x1e0a0a14U,
     0xdb494992U, 0x0a06060cU, 0x6c242448U, 0xe45c5cb8U,
     0x5dc2c29fU, 0x6ed3d3bdU, 0xefacac43U, 0xa66262c4U,
     0xa8919139U, 0xa4959531U, 0x37e4e4d3U, 0x8b7979f2U,
     0x32e7e7d5U, 0x43c8c88bU, 0x5937376eU, 0xb76d6ddaU,
     0x8c8d8d01U, 0x64d5d5b1U, 0xd24e4e9cU, 0xe0a9a949U,
     0xb46c6cd8U, 0xfa5656acU, 0x07f4f4f3U, 0x25eaeacfU,
     0xaf6565caU, 0x8e7a7af4U, 0xe9aeae47U, 0x18080810U,
     0xd5baba6fU, 0x887878f0U, 0x6f25254aU, 0x722e2e5cU,
     0x241c1c38U, 0xf1a6a657U, 0xc7b4b473U, 0x51c6c697U,
     0x23e8e8cbU, 0x7cdddda1U, 0x9c7474e8U, 0x211f1f3eU,
     0xdd4b4b96U, 0xdcbdbd61U, 0x868b8b0dU, 0x858a8a0fU,
     0x907070e0U, 0x423e3e7cU, 0xc4b5b571U, 0xaa6666ccU,
     0xd8484890U, 0x05030306U, 0x01f6f6f7U, 0x120e0e1cU,
     0xa36161c2U, 0x5f35356aU, 0xf95757aeU, 0xd0b9b969U,
     0x91868617U, 0x58c1c199U, 0x271d1d3aU, 0xb99e9e27U,
     0x38e1e1d9U, 0x13f8f8ebU, 0xb398982bU, 0x33111122U,
     0xbb6969d2U, 0x70d9d9a9U, 0x898e8e07U, 0xa7949433U,
     0xb69b9b2dU, 0x221e1e3cU, 0x92878715U, 0x20e9e9c9U,
     0x49cece87U, 0xff5555aaU, 0x78282850U, 0x7adfdfa5U,
     0x8f8c8c03U, 0xf8a1a159U, 0x80898909U, 0x170d0d1aU,
     0xdabfbf65U, 0x31e6e6d7U, 0xc6424284U, 0xb86868d0U,
     0xc3414182U, 0xb0999929U, 0x772d2d5aU, 0x110f0f1eU,
     0xcbb0b07bU, 0xfc5454a8U, 0xd6bbbb6dU, 0x3a16162cU,
};
static const uint32_t Te1_be[256] = {
     0x6363c6a5U, 0x7c7cf884U, 0x7777ee99U, 0x7b7bf68dU,
     0xf2f2ff0dU, 0x6b6bd6bdU, 0x6f6fdeb1U, 0xc5c59154U,
     0x30306050U, 0x01010203U, 0x6767cea9U, 0x2b2b567dU,
     0xfefee719U, 0xd7d7b562U, 0xabab4de6U, 0x7676ec9aU,
     0xcaca8f45U, 0x82821f9dU, 0xc9c98940U, 0x7d7dfa87U,
     0xfafaef15U, 0x5959b2ebU, 0x47478ec9U, 0xf0f0fb0bU,
     0xadad41ecU, 0xd4d4b367U, 0xa2a25ffdU, 0xafaf45eaU,
     0x9c9c23bfU, 0xa4a453f7U, 0x7272e496U, 0xc0c09b5bU,
     0xb7b775c2U, 0xfdfde11cU, 0x93933daeU, 0x26264c6aU,
     0x36366c5aU, 0x3f3f7e41U, 0xf7f7f502U, 0xcccc834fU,
     0x3434685cU, 0xa5a551f4U, 0xe5e5d134U, 0xf1f1f908U,
     0x7171e293U, 0xd8d8ab73U, 0x31316253U, 0x15152a3fU,
     0x0404080cU, 0xc7c79552U, 0x23234665U, 0xc3c39d5eU,
     0x18183028U, 0x969637a1U, 0x05050a0fU, 0x9a9a2fb5U,
     0x07070e09U, 0x12122436U, 0x80801b9bU, 0xe2e2df3dU,
     0xebebcd26U, 0x27274e69U, 0xb2b27fcdU, 0x7575ea9fU,
     0x0909121bU, 0x83831d9eU, 0x2c2c5874U, 0x1a1a342eU,
     0x1b1b362dU, 0x6e6edcb2U, 0x5a5ab4eeU, 0xa0a05bfbU,
     0x5252a4f6U, 0x3b3b764dU, 0xd6d6b761U, 0xb3b37dceU,
     0x2929527bU, 0xe3e3dd3eU, 0x2f2f5e71U, 0x84841397U,
     0x5353a6f5U, 0xd1d1b968U, 0x00000000U, 0xededc12cU,
     0x20204060U, 0xfcfce31fU, 0xb1b179c8U, 0x5b5bb6edU,
     0x6a6ad4beU, 0xcbcb8d46U, 0xbebe67d9U, 0x3939724bU,
     0x4a4a94deU, 0x4c4c98d4U, 0x5858b0e8U, 0xcfcf854aU,
     0xd0d0bb6bU, 0xefefc52aU, 0xaaaa4fe5U, 0xfbfbed16U,
     0x434386c5U, 0x4d4d9ad7U, 0x33336655U, 0x85851194U,
     0x45458acfU, 0xf9f9e910U, 0x02020406U, 0x7f7ffe81U,
     0x5050a0f0U, 0x3c3c7844U, 0x9f9f25baU, 0xa8a84be3U,
     0x5151a2f3U, 0xa3a35dfeU, 0x404080c0U, 0x8f8f058aU,
     0x92923fadU, 0x9d9d21bcU, 0x38387048U, 0xf5f5f104U,
     0xbcbc63dfU, 0xb6b677c1U, 0xdadaaf75U, 0x21214263U,
     0x10102030U, 0xffffe51aU, 0xf3f3fd0eU, 0xd2d2bf6dU,
     0xcdcd814cU, 0x0c0c1814U, 0x13132635U, 0xececc32fU,
     0x5f5fbee1U, 0x979735a2U, 0x444488ccU, 0x17172e39U,
     0xc4c49357U, 0xa7a755f2U, 0x7e7efc82U, 0x3d3d7a47U,
     0x6464c8acU, 0x5d5dbae7U, 0x1919322bU, 0x7373e695U,
     0x6060c0a0U, 0x81811998U, 0x4f4f9ed1U, 0xdcdca37fU,
     0x22224466U, 0x2a2a547eU, 0x90903babU, 0x88880b83U,
     0x46468ccaU, 0xeeeec729U, 0xb8b86bd3U, 0x1414283cU,
     0xdedea779U, 0x5e5ebce2U, 0x0b0b161dU, 0xdbdbad76U,
     0xe0e0db3bU, 0x32326456U, 0x3a3a744eU, 0x0a0a141eU,
     0x494992dbU, 0x06060c0aU, 0x2424486cU, 0x5c5cb8e4U,
     0xc2c29f5dU, 0xd3d3bd6eU, 0xacac43efU, 0x6262c4a6U,
     0x919139a8U, 0x959531a4U, 0xe4e4d337U, 0x7979f28bU,
     0xe7e7d532U, 0xc8c88b43U, 0x37376e59U, 0x6d6ddab7U,
     0x8d8d018cU, 0xd5d5b164U, 0x4e4e9cd2U, 0xa9a949e0U,
     0x6c6cd8b4U, 0x5656acfaU, 0xf4f4f307U, 0xeaeacf25U,
     0x6565caafU, 0x7a7af48eU, 0xaeae47e9U, 0x08081018U,
     0xbaba6fd5U, 0x7878f088U, 0x25254a6fU, 0x2e2e5c72U,
     0x1c1c3824U, 0xa6a657f1U, 0xb4b473c7U, 0xc6c69751U,
     0xe8e8cb23U, 0xdddda17cU, 0x7474e89cU, 0x1f1f3e21U,
     0x4b4b96ddU, 0xbdbd61dcU, 0x8b8b0d86U, 0x8a8a0f85U,
     0x7070e090U, 0x3e3e7c42U, 0xb5b571c4U, 0x6666ccaaU,
     0x484890d8U, 0x03030605U, 0xf6f6f701U, 0x0e0e1c12U,
     0x6161c2a3U, 0x35356a5fU, 0x5757aef9U, 0xb9b969d0U,
     0x86861791U, 0xc1c19958U, 0x1d1d3a27U, 0x9e9e27b9U,
     0xe1e1d938U, 0xf8f8eb13U, 0x98982bb3U, 0x11112233U,
     0x6969d2bbU, 0xd9d9a970U, 0x8e8e0789U, 0x949433a7U,
     0x9b9b2db6U, 0x1e1e3c22U, 0x87871592U, 0xe9e9c920U,
     0xcece8749U, 0x5555aaffU, 0x28285078U, 0xdfdfa57aU,
     0x8c8c038fU, 0xa1a159f8U, 0x89890980U, 0x0d0d1a17U,
     0xbfbf65daU, 0xe6e6d731U, 0x424284c6U, 0x6868d0b8U,
     0x414182c3U, 0x999929b0U, 0x2d2d5a77U, 0x0f0f1e11U,
     0xb0b07bcbU, 0x5454a8fcU, 0xbbbb6dd6U, 0x16162c3aU,
};
static const uint32_t Te2_be[256] = {
     0x63c6a563U, 0x7cf8847cU, 0x77ee9977U, 0x7bf68d7bU,
     0xf2ff0df2U, 0x6bd6bd6bU, 0x6fdeb16fU, 0xc59154c5U,
     0x30605030U, 0x01020301U, 0x67cea967U, 0x2b567d2bU,
     0xfee719feU, 0xd7b562d7U, 0xab4de6abU, 0x76ec9a76U,
     0xca8f45caU, 0x821f9d82U, 0xc98940c9U, 0x7dfa877dU,
     0xfaef15faU, 0x59b2eb59U, 0x478ec947U, 0xf0fb0bf0U,
     0xad41ecadU, 0xd4b367d4U, 0xa25ffda2U, 0xaf45eaafU,
     0x9c23bf9cU, 0xa453f7a4U, 0x72e49672U, 0xc09b5bc0U,
     0xb775c2b7U, 0xfde11cfdU, 0x933dae93U, 0x264c6a26U,
     0x366c5a36U, 0x3f7e413fU, 0xf7f502f7U, 0xcc834fccU,
     0x34685c34U, 0xa551f4a5U, 0xe5d134e5U, 0xf1f908f1U,
     0x71e29371U, 0xd8ab73d8U, 0x31625331U, 0x152a3f15U,
     0x04080c04U, 0xc79552c7U, 0x23466523U, 0xc39d5ec3U,
     0x18302818U, 0x9637a196U, 0x050a0f05U, 0x9a2fb59aU,
     0x070e0907U, 0x12243612U, 0x801b9b80U, 0xe2df3de2U,
     0xebcd26ebU, 0x274e6927U, 0xb27fcdb2U, 0x75ea9f75U,
     0x09121b09U, 0x831d9e83U, 0x2c58742cU, 0x1a342e1aU,
     0x1b362d1bU, 0x6edcb26eU, 0x5ab4ee5aU, 0xa05bfba0U,
     0x52a4f652U, 0x3b764d3bU, 0xd6b761d6U, 0xb37dceb3U,
     0x29527b29U, 0xe3dd3ee3U, 0x2f5e712fU, 0x84139784U,
     0x53a6f553U, 0xd1b968d1U, 0x00000000U, 0xedc12cedU,
     0x20406020U, 0xfce31ffcU, 0xb179c8b1U, 0x5bb6ed5bU,
     0x6ad4be6aU, 0xcb8d46cbU, 0xbe67d9beU, 0x39724b39U,
     0x4a94de4aU, 0x4c98d44cU, 0x58b0e858U, 0xcf854acfU,
     0xd0bb6bd0U, 0xefc52aefU, 0xaa4fe5aaU, 0xfbed16fbU,
     0x4386c543U, 0x4d9ad74dU, 0x33665533U, 0x85119485U,
     0x458acf45U, 0xf9e910f9U, 0x02040602U, 0x7ffe817fU,
     0x50a0f050U, 0x3c78443cU, 0x9f25ba9fU, 0xa84be3a8U,
     0x51a2f351U, 0xa35dfea3U, 0x4080c040U, 0x8f058a8fU,
     0x923fad92U, 0x9d21bc9dU, 0x38704838U, 0xf5f104f5U,
     0xbc63dfbcU, 0xb677c1b6U, 0xdaaf75daU, 0x21426321U,
     0x10203010U, 0xffe51affU, 0xf3fd0ef3U, 0xd2bf6dd2U,
     0xcd814ccdU, 0x0c18140cU, 0x13263513U, 0xecc32fecU,
     0x5fbee15fU, 0x9735a297U, 0x4488cc44U, 0x172e3917U,
     0xc49357c4U, 0xa755f2a7U, 0x7efc827eU, 0x3d7a473dU,
     0x64c8ac64U, 0x5dbae75dU, 0x19322b19U, 0x73e69573U,
     0x60c0a060U, 0x81199881U, 0x4f9ed14fU, 0xdca37fdcU,
     0x22446622U, 0x2a547e2aU, 0x903bab90U, 0x880b8388U,
     0x468cca46U, 0xeec729eeU, 0xb86bd3b8U, 0x14283c14U,
     0xdea779deU, 0x5ebce25eU, 0x0b161d0bU, 0xdbad76dbU,
     0xe0db3be0U, 0x32645632U, 0x3a744e3aU, 0x0a141e0aU,
     0x4992db49U, 0x060c0a06U, 0x24486c24U, 0x5cb8e45cU,
     0xc29f5dc2U, 0xd3bd6ed3U, 0xac43efacU, 0x62c4a662U,
     0x9139a891U, 0x9531a495U, 0xe4d337e4U, 0x79f28b79U,
     0xe7d532e7U, 0xc88b43c8U, 0x376e5937U, 0x6ddab76dU,
     0x8d018c8dU, 0xd5b164d5U, 0x4e9cd24eU, 0xa949e0a9U,
     0x6cd8b46cU, 0x56acfa56U, 0xf4f307f4U, 0xeacf25eaU,
     0x65caaf65U, 0x7af48e7aU, 0xae47e9aeU, 0x08101808U,
     0xba6fd5baU, 0x78f08878U, 0x254a6f25U, 0x2e5c722eU,
     0x1c38241cU, 0xa657f1a6U, 0xb473c7b4U, 0xc69751c6U,
     0xe8cb23e8U, 0xdda17cddU, 0x74e89c74U, 0x1f3e211fU,
     0x4b96dd4bU, 0xbd61dcbdU, 0x8b0d868bU, 0x8a0f858aU,
     0x70e09070U, 0x3e7c423eU, 0xb571c4b5U, 0x66ccaa66U,
     0x4890d848U, 0x03060503U, 0xf6f701f6U, 0x0e1c120eU,
     0x61c2a361U, 0x356a5f35U, 0x57aef957U, 0xb969d0b9U,
     0x86179186U, 0xc19958c1U, 0x1d3a271dU, 0x9e27b99eU,
     0xe1d938e1U, 0xf8eb13f8U, 0x982bb398U, 0x11223311U,
     0x69d2bb69U, 0xd9a970d9U, 0x8e07898eU, 0x9433a794U,
     0x9b2db69bU, 0x1e3c221eU, 0x87159287U, 0xe9c920e9U,
     0xce8749ceU, 0x55aaff55U, 0x28507828U, 0xdfa57adfU,
     0x8c038f8cU, 0xa159f8a1U, 0x89098089U, 0x0d1a170dU,
     0xbf65dabfU, 0xe6d731e6U, 0x4284c642U, 0x68d0b868U,
     0x4182c341U, 0x9929b099U, 0x2d5a772dU, 0x0f1e110fU,
     0xb07bcbb0U, 0x54a8fc54U, 0xbb6dd6bbU, 0x162c3a16U,
};
static const uint32_t Te3_be[256] = {
     0xc6a56363U, 0xf8847c7cU, 0xee997777U, 0xf68d7b7bU,
     0xff0df2f2U, 0xd6bd6b6bU, 0xdeb16f6fU, 0x9154c5c5U,
     0x60503030U, 0x02030101U, 0xcea96767U, 0x567d2b2bU,
     0xe719fefeU, 0xb562d7d7U, 0x4de6ababU, 0xec9a7676U,
     0x8f45cacaU, 0x1f9d8282U, 0x8940c9c9U, 0xfa877d7dU,
     0xef15fafaU, 0xb2eb5959U, 0x8ec94747U, 0xfb0bf0f0U,
     0x41ecadadU, 0xb367d4d4U, 0x5ffda2a2U, 0x45eaafafU,
     0x23bf9c9cU, 0x53f7a4a4U, 0xe4967272U, 0x9b5bc0c0U,
     0x75c2b7b7U, 0xe11cfdfdU, 0x3dae9393U, 0x4c6a2626U,
     0x6c5a3636U, 0x7e413f3fU, 0xf502f7f7U, 0x834fccccU,
     0x685c3434U, 0x51f4a5a5U, 0xd134e5e5U, 0xf908f1f1U,
     0xe2937171U, 0xab73d8d8U, 0x62533131U, 0x2a3f1515U,
     0x080c0404U, 0x9552c7c7U, 0x46652323U, 0x9d5ec3c3U,
     0x30281818U, 0x37a19696U, 0x0a0f0505U, 0x2fb59a9aU,
     0x0e090707U, 0x24361212U, 0x1b9b8080U, 0xdf3de2e2U,
     0xcd26ebebU, 0x4e692727U, 0x7fcdb2b2U, 0xea9f7575U,
     0x121b0909U, 0x1d9e8383U, 0x58742c2cU, 0x342e1a1aU,
     0x362d1b1bU, 0xdcb26e6eU, 0xb4ee5a5aU, 0x5bfba0a0U,
     0xa4f65252U, 0x764d3b3bU, 0xb761d6d6U, 0x7dceb3b3U,
     0x527b2929U, 0xdd3ee3e3U, 0x5e712f2fU, 0x13978484U,
     0xa6f55353U, 0xb968d1d1U, 0x00000000U, 0xc12cededU,
     0x40602020U, 0xe31ffcfcU, 0x79c8b1b1U, 0xb6ed5b5bU,
     0xd4be6a6aU, 0x8d46cbcbU, 0x67d9bebeU, 0x724b3939U,
     0x94de4a4aU, 0x98d44c4cU, 0xb0e85858U, 0x854acfcfU,
     0xbb6bd0d0U, 0xc52aefefU, 0x4fe5aaaaU, 0xed16fbfbU,
     0x86c54343U, 0x9ad74d4dU, 0x66553333U, 0x11948585U,
     0x8acf4545U, 0xe910f9f9U, 0x04060202U, 0xfe817f7fU,
     0xa0f05050U, 0x78443c3cU, 0x25ba9f9fU, 0x4be3a8a8U,
     0xa2f35151U, 0x5dfea3a3U, 0x80c04040U, 0x058a8f8fU,
     0x3fad9292U, 0x21bc9d9dU, 0x70483838U, 0xf104f5f5U,
     0x63dfbcbcU, 0x77c1b6b6U, 0xaf75dadaU, 0x42632121U,
     0x20301010U, 0xe51affffU, 0xfd0ef3f3U, 0xbf6dd2d2U,
     0x814ccdcdU, 0x18140c0cU, 0x26351313U, 0xc32fececU,
     0xbee15f5fU, 0x35a29797U, 0x88cc4444U, 0x2e391717U,
     0x9357c4c4U, 0x55f2a7a7U, 0xfc827e7eU, 0x7a473d3dU,
     0xc8ac6464U, 0xbae75d5dU, 0x322b1919U, 0xe6957373U,
     0xc0a06060U, 0x19988181U, 0x9ed14f4fU, 0xa37fdcdcU,
     0x44662222U, 0x547e2a2aU, 0x3bab9090U, 0x0b838888U,
     0x8cca4646U, 0xc729eeeeU, 0x6bd3b8b8U, 0x283c1414U,
     0xa779dedeU, 0xbce25e5eU, 0x161d0b0bU, 0xad76dbdbU,
     0xdb3be0e0U, 0x64563232U, 0x744e3a3aU, 0x141e0a0aU,
     0x92db4949U, 0x0c0a0606U, 0x486c2424U, 0xb8e45c5cU,
     0x9f5dc2c2U, 0xbd6ed3d3U, 0x43efacacU, 0xc4a66262U,
     0x39a89191U, 0x31a49595U, 0xd337e4e4U, 0xf28b7979U,
     0xd532e7e7U, 0x8b43c8c8U, 0x6e593737U, 0xdab76d6dU,
     0x018c8d8dU, 0xb164d5d5U, 0x9cd24e4eU, 0x49e0a9a9U,
     0xd8b46c6cU, 0xacfa5656U, 0xf307f4f4U, 0xcf25eaeaU,
     0xcaaf6565U, 0xf48e7a7aU, 0x47e9aeaeU, 0x10180808U,
     0x6fd5babaU, 0xf0887878U, 0x4a6f2525U, 0x5c722e2eU,
     0x38241c1cU, 0x57f1a6a6U, 0x73c7b4b4U, 0x9751c6c6U,
     0xcb23e8e8U, 0xa17cddddU, 0xe89c7474U, 0x3e211f1fU,
     0x96dd4b4bU, 0x61dcbdbdU, 0x0d868b8bU, 0x0f858a8aU,
     0xe0907070U, 0x7c423e3eU, 0x71c4b5b5U, 0xccaa6666U,
     0x90d84848U, 0x06050303U, 0xf701f6f6U, 0x1c120e0eU,
     0xc2a36161U, 0x6a5f3535U, 0xaef95757U, 0x69d0b9b9U,
     0x17918686U, 0x9958c1c1U, 0x3a271d1dU, 0x27b99e9eU,
     0xd938e1e1U, 0xeb13f8f8U, 0x2bb39898U, 0x22331111U,
     0xd2bb6969U, 0xa970d9d9U, 0x07898e8eU, 0x33a79494U,
     0x2db69b9bU, 0x3c221e1eU, 0x15928787U, 0xc920e9e9U,
     0x8749ceceU, 0xaaff5555U, 0x50782828U, 0xa57adfdfU,
     0x038f8c8cU, 0x59f8a1a1U, 0x09808989U, 0x1a170d0dU,
     0x65dabfbfU, 0xd731e6e6U, 0x84c64242U, 0xd0b86868U,
     0x82c34141U, 0x29b09999U, 0x5a772d2dU, 0x1e110f0fU,
     0x7bcbb0b0U, 0xa8fc5454U, 0x6dd6bbbbU, 0x2c3a1616U,
};
static const uint32_t Td0_be[256] = {
     0x50a7f451U, 0x5365417eU, 0xc3a4171aU, 0x965e273aU,
     0xcb6bab3bU, 0xf1459d1fU, 0xab58faacU, 0x9303e34bU,
     0x55fa3020U, 0xf66d76adU, 0x9176cc88U, 0x254c02f5U,
     0xfcd7e54fU, 0xd7cb2ac5U, 0x80443526U, 0x8fa362b5U,
     0x495ab1deU, 0x671bba25U, 0x980eea45U, 0xe1c0fe5dU,
     0x02752fc3U, 0x12f04c81U, 0xa397468dU, 0xc6f9d36bU,
     0xe75f8f03U, 0x959c9215U, 0xeb7a6dbfU, 0xda595295U,
     0x2d83bed4U, 0xd3217458U, 0x2969e049U, 0x44c8c98eU,
     0x6a89c275U, 0x78798ef4U, 0x6b3e5899U, 0xdd71b927U,
     0xb64fe1beU, 0x17ad88f0U, 0x66ac20c9U, 0xb43ace7dU,
     0x184adf63U, 0x82311ae5U, 0x60335197U, 0x457f5362U,
     0xe07764b1U, 0x84ae6bbbU, 0x1ca081feU, 0x942b08f9U,
     0x58684870U, 0x19fd458fU, 0x876cde94U, 0xb7f87b52U,
     0x23d373abU, 0xe2024b72U, 0x578f1fe3U, 0x2aab5566U,
     0x0728ebb2U, 0x03c2b52fU, 0x9a7bc586U, 0xa50837d3U,
     0xf2872830U, 0xb2a5bf23U, 0xba6a0302U, 0x5c8216edU,
     0x2b1ccf8aU, 0x92b479a7U, 0xf0f207f3U, 0xa1e2694eU,
     0xcdf4da65U, 0xd5be0506U, 0x1f6234d1U, 0x8afea6c4U,
     0x9d532e34U, 0xa055f3a2U, 0x32e18a05U, 0x75ebf6a4U,
     0x39ec830bU, 0xaaef6040U, 0x069f715eU, 0x51106ebdU,
     0xf98a213eU, 0x3d06dd96U, 0xae053eddU, 0x46bde64dU,
     0xb58d5491U, 0x055dc471U, 0x6fd40604U, 0xff155060U,
     0x24fb9819U, 0x97e9bdd6U, 0xcc434089U, 0x779ed967U,
     0xbd42e8b0U, 0x888b8907U, 0x385b19e7U, 0xdbeec879U,
     0x470a7ca1U, 0xe90f427cU, 0xc91e84f8U, 0x00000000U,
     0x83868009U, 0x48ed2b32U, 0xac70111eU, 0x4e725a6cU,
     0xfbff0efdU, 0x5638850fU, 0x1ed5ae3dU, 0x27392d36U,
     0x64d90f0aU, 0x21a65c68U, 0xd1545b9bU, 0x3a2e3624U,
     0xb1670a0cU, 0x0fe75793U, 0xd296eeb4U, 0x9e919b1bU,
     0x4fc5c080U, 0xa220dc61U, 0x694b775aU, 0x161a121cU,
     0x0aba93e2U, 0xe52aa0c0U, 0x43e0223cU, 0x1d171b12U,
     0x0b0d090eU, 0xadc78bf2U, 0xb9a8b62dU, 0xc8a91e14U,
     0x8519f157U, 0x4c0775afU, 0xbbdd99eeU, 0xfd607fa3U,
     0x9f2601f7U, 0xbcf5725cU, 0xc53b6644U, 0x347efb5bU,
     0x7629438bU, 0xdcc623cbU, 0x68fcedb6U, 0x63f1e4b8U,
     0xcadc31d7U, 0x10856342U, 0x40229713U, 0x2011c684U,
     0x7d244a85U, 0xf83dbbd2U, 0x1132f9aeU, 0x6da129c7U,
     0x4b2f9e1dU, 0xf330b2dcU, 0xec52860dU, 0xd0e3c177U,
     0x6c16b32bU, 0x99b970a9U, 0xfa489411U, 0x2264e947U,
     0xc48cfca8U, 0x1a3ff0a0U, 0xd82c7d56U, 0xef903322U,
     0xc74e4987U, 0xc1d138d9U, 0xfea2ca8cU, 0x360bd498U,
     0xcf81f5a6U, 0x28de7aa5U, 0x268eb7daU, 0xa4bfad3fU,
     0xe49d3a2cU, 0x0d927850U, 0x9bcc5f6aU, 0x62467e54U,
     0xc2138df6U, 0xe8b8d890U, 0x5ef7392eU, 0xf5afc382U,
     0xbe805d9fU, 0x7c93d069U, 0xa92dd56fU, 0xb31225cfU,
     0x3b99acc8U, 0xa77d1810U, 0x6e639ce8U, 0x7bbb3bdbU,
     0x097826cdU, 0xf418596eU, 0x01b79aecU, 0xa89a4f83U,
     0x656e95e6U, 0x7ee6ffaaU, 0x08cfbc21U, 0xe6e815efU,
     0xd99be7baU, 0xce366f4aU, 0xd4099feaU, 0xd67cb029U,
     0xafb2a431U, 0x31233f2aU, 0x3094a5c6U, 0xc066a235U,
     0x37bc4e74U, 0xa6ca82fcU, 0xb0d090e0U, 0x15d8a733U,
     0x4a9804f1U, 0xf7daec41U, 0x0e50cd7fU, 0x2ff69117U,
     0x8dd64d76U, 0x4db0ef43U, 0x544daaccU, 0xdf0496e4U,
     0xe3b5d19eU, 0x1b886a4cU, 0xb81f2cc1U, 0x7f516546U,
     0x04ea5e9dU, 0x5d358c01U, 0x737487faU, 0x2e410bfbU,
     0x5a1d67b3U, 0x52d2db92U, 0x335610e9U, 0x1347d66dU,
     0x8c61d79aU, 0x7a0ca137U, 0x8e14f859U, 0x893c13ebU,
     0xee27a9ceU, 0x35c961b7U, 0xede51ce1U, 0x3cb1477aU,
     0x59dfd29cU, 0x3f73f255U, 0x79ce1418U, 0xbf37c773U,
     0xeacdf753U, 0x5baafd5fU, 0x146f3ddfU, 0x86db4478U,
     0x81f3afcaU, 0x3ec468b9U, 0x2c342438U, 0x5f40a3c2U,
     0x72c31d16U, 0x0c25e2bcU, 0x8b493c28U, 0x41950dffU,
     0x7101a839U, 0xdeb30c08U, 0x9ce4b4d8U, 0x90c15664U,
     0x6184cb7bU, 0x70b632d5U, 0x745c6c48U, 0x4257b8d0U,
};
static const uint32_t Td1_be[256] = {
     0xa7f45150U, 0x65417e53U, 0xa4171ac3U, 0x5e273a96U,
     0x6bab3bcbU, 0x459d1ff1U, 0x58faacabU, 0x03e34b93U,
     0xfa302055U, 0x6d76adf6U, 0x76cc8891U, 0x4c02f525U,
     0xd7e54ffcU, 0xcb2ac5d7U, 0x44352680U, 0xa362b58fU,
     0x5ab1de49U, 0x1bba2567U, 0x0eea4598U, 0xc0fe5de1U,
     0x752fc302U, 0xf04c8112U, 0x97468da3U, 0xf9d36bc6U,
     0x5f8f03e7U, 0x9c921595U, 0x7a6dbfebU, 0x595295daU,
     0x83bed42dU, 0x217458d3U, 0x69e04929U, 0xc8c98e44U,
     0x89c2756aU, 0x798ef478U, 0x3e58996bU, 0x71b927ddU,
     0x4fe1beb6U, 0xad88f017U, 0xac20c966U, 0x3ace7db4U,
     0x4adf6318U, 0x311ae582U, 0x33519760U, 0x7f536245U,
     0x7764b1e0U, 0xae6bbb84U, 0xa081fe1cU, 0x2b08f994U,
     0x68487058U, 0xfd458f19U, 0x6cde9487U, 0xf87b52b7U,
     0xd373ab23U, 0x024b72e2U, 0x8f1fe357U, 0xab55662aU,
     0x28ebb207U, 0xc2b52f03U, 0x7bc5869aU, 0x0837d3a5U,
     0x872830f2U, 0xa5bf23b2U, 0x6a0302baU, 0x8216ed5cU,
     0x1ccf8a2bU, 0xb479a792U, 0xf207f3f0U, 0xe2694ea1U,
     0xf4da65cdU, 0xbe0506d5U, 0x6234d11fU, 0xfea6c48aU,
     0x532e349dU, 0x55f3a2a0U, 0xe18a0532U, 0xebf6a475U,
     0xec830b39U, 0xef6040aaU, 0x9f715e06U, 0x106ebd51U,
     0x8a213ef9U, 0x06dd963dU, 0x053eddaeU, 0xbde64d46U,
     0x8d5491b5U, 0x5dc47105U, 0xd406046fU, 0x155060ffU,
     0xfb981924U, 0xe9bdd697U, 0x434089ccU, 0x9ed96777U,
     0x42e8b0bdU, 0x8b890788U, 0x5b19e738U, 0xeec879dbU,
     0x0a7ca147U, 0x0f427ce9U, 0x1e84f8c9U, 0x00000000U,
     0x86800983U, 0xed2b3248U, 0x70111eacU, 0x725a6c4eU,
     0xff0efdfbU, 0x38850f56U, 0xd5ae3d1eU, 0x392d3627U,
     0xd90f0a64U, 0xa65c6821U, 0x545b9bd1U, 0x2e36243aU,
     0x670a0cb1U, 0xe757930fU, 0x96eeb4d2U, 0x919b1b9eU,
     0xc5c0804fU, 0x20dc61a2U, 0x4b775a69U, 0x1a121c16U,
     0xba93e20aU, 0x2aa0c0e5U, 0xe0223c43U, 0x171b121dU,
     0x0d090e0bU, 0xc78bf2adU, 0xa8b62db9U, 0xa91e14c8U,
     0x19f15785U, 0x0775af4cU, 0xdd99eebbU, 0x607fa3fdU,
     0x2601f79fU, 0xf5725cbcU, 0x3b6644c5U, 0x7efb5b34U,
     0x29438b76U, 0xc623cbdcU, 0xfcedb668U, 0xf1e4b863U,
     0xdc31d7caU, 0x85634210U, 0x22971340U, 0x11c68420U,
     0x244a857dU, 0x3dbbd2f8U, 0x32f9ae11U, 0xa129c76dU,
     0x2f9e1d4bU, 0x30b2dcf3U, 0x52860decU, 0xe3c177d0U,
     0x16b32b6cU, 0xb970a999U, 0x489411faU, 0x64e94722U,
     0x8cfca8c4U, 0x3ff0a01aU, 0x2c7d56d8U, 0x903322efU,
     0x4e4987c7U, 0xd138d9c1U, 0xa2ca8cfeU, 0x0bd49836U,
     0x81f5a6cfU, 0xde7aa528U, 0x8eb7da26U, 0xbfad3fa4U,
     0x9d3a2ce4U, 0x9278500dU, 0xcc5f6a9bU, 0x467e5462U,
     0x138df6c2U, 0xb8d890e8U, 0xf7392e5eU, 0xafc382f5U,
     0x805d9fbeU, 0x93d0697cU, 0x2dd56fa9U, 0x1225cfb3U,
     0x99acc83bU, 0x7d1810a7U, 0x639ce86eU, 0xbb3bdb7bU,
     0x7826cd09U, 0x18596ef4U, 0xb79aec01U, 0x9a4f83a8U,
     0x6e95e665U, 0xe6ffaa7eU, 0xcfbc2108U, 0xe815efe6U,
     0x9be7bad9U, 0x366f4aceU, 0x099fead4U, 0x7cb029d6U,
     0xb2a431afU, 0x233f2a31U, 0x94a5c630U, 0x66a235c0U,
     0xbc4e7437U, 0xca82fca6U, 0xd090e0b0U, 0xd8a73315U,
     0x9804f14aU, 0xdaec41f7U, 0x50cd7f0eU, 0xf691172fU,
     0xd64d768dU, 0xb0ef434dU, 0x4daacc54U, 0x0496e4dfU,
     0xb5d19ee3U, 0x886a4c1bU, 0x1f2cc1b8U, 0x5165467fU,
     0xea5e9d04U, 0x358c015dU, 0x7487fa73U, 0x410bfb2eU,
     0x1d67b35aU, 0xd2db9252U, 0x5610e933U, 0x47d66d13U,
     0x61d79a8cU, 0x0ca1377aU, 0x14f8598eU, 0x3c13eb89U,
     0x27a9ceeeU, 0xc961b735U, 0xe51ce1edU, 0xb1477a3cU,
     0xdfd29c59U, 0x73f2553fU, 0xce141879U, 0x37c773bfU,
     0xcdf753eaU, 0xaafd5f5bU, 0x6f3ddf14U, 0xdb447886U,
     0xf3afca81U, 0xc468b93eU, 0x3424382cU, 0x40a3c25fU,
     0xc31d1672U, 0x25e2bc0cU, 0x493c288bU, 0x950dff41U,
     0x01a83971U, 0xb30c08deU, 0xe4b4d89cU, 0xc1566490U,
     0x84cb7b61U, 0xb632d570U, 0x5c6c4874U, 0x57b8d042U,
};
static const uint32_t Td2_be[256] = {
     0xf45150a7U, 0x417e5365U, 0x171ac3a4U, 0x273a965eU,
     0xab3bcb6bU, 0x9d1ff145U, 0xfaacab58U, 0xe34b9303U,
     0x302055faU, 0x76adf66dU, 0xcc889176U, 0x02f5254cU,
     0xe54ffcd7U, 0x2ac5d7cbU, 0x35268044U, 0x62b58fa3U,
     0xb1de495aU, 0xba25671bU, 0xea45980eU, 0xfe5de1c0U,
     0x2fc30275U, 0x4c8112f0U, 0x468da397U, 0xd36bc6f9U,
     0x8f03e75fU, 0x9215959cU, 0x6dbfeb7aU, 0x5295da59U,
     0xbed42d83U, 0x7458d321U, 0xe0492969U, 0xc98e44c8U,
     0xc2756a89U, 0x8ef47879U, 0x58996b3eU, 0xb927dd71U,
     0xe1beb64fU, 0x88f017adU, 0x20c966acU, 0xce7db43aU,
     0xdf63184aU, 0x1ae58231U, 0x51976033U, 0x5362457fU,
     0x64b1e077U, 0x6bbb84aeU, 0x81fe1ca0U, 0x08f9942bU,
     0x48705868U, 0x458f19fdU, 0xde94876cU, 0x7b52b7f8U,
     0x73ab23d3U, 0x4b72e202U, 0x1fe3578fU, 0x55662aabU,
     0xebb20728U, 0xb52f03c2U, 0xc5869a7bU, 0x37d3a508U,
     0x2830f287U, 0xbf23b2a5U, 0x0302ba6aU, 0x16ed5c82U,
     0xcf8a2b1cU, 0x79a792b4U, 0x07f3f0f2U, 0x694ea1e2U,
     0xda65cdf4U, 0x0506d5beU, 0x34d11f62U, 0xa6c48afeU,
     0x2e349d53U, 0xf3a2a055U, 0x8a0532e1U, 0xf6a475ebU,
     0x830b39ecU, 0x6040aaefU, 0x715e069fU, 0x6ebd5110U,
     0x213ef98aU, 0xdd963d06U, 0x3eddae05U, 0xe64d46bdU,
     0x5491b58dU, 0xc471055dU, 0x06046fd4U, 0x5060ff15U,
     0x981924fbU, 0xbdd697e9U, 0x4089cc43U, 0xd967779eU,
     0xe8b0bd42U, 0x8907888bU, 0x19e7385bU, 0xc879dbeeU,
     0x7ca1470aU, 0x427ce90fU, 0x84f8c91eU, 0x00000000U,
     0x80098386U, 0x2b3248edU, 0x111eac70U, 0x5a6c4e72U,
     0x0efdfbffU, 0x850f5638U, 0xae3d1ed5U, 0x2d362739U,
     0x0f0a64d9U, 0x5c6821a6U, 0x5b9bd154U, 0x36243a2eU,
     0x0a0cb167U, 0x57930fe7U, 0xeeb4d296U, 0x9b1b9e91U,
     0xc0804fc5U, 0xdc61a220U, 0x775a694bU, 0x121c161aU,
     0x93e20abaU, 0xa0c0e52aU, 0x223c43e0U, 0x1b121d17U,
     0x090e0b0dU, 0x8bf2adc7U, 0xb62db9a8U, 0x1e14c8a9U,
     0xf1578519U, 0x75af4c07U, 0x99eebbddU, 0x7fa3fd60U,
     0x01f79f26U, 0x725cbcf5U, 0x6644c53bU, 0xfb5b347eU,
     0x438b7629U, 0x23cbdcc6U, 0xedb668fcU, 0xe4b863f1U,
     0x31d7cadcU, 0x63421085U, 0x97134022U, 0xc6842011U,
     0x4a857d24U, 0xbbd2f83dU, 0xf9ae1132U, 0x29c76da1U,
     0x9e1d4b2fU, 0xb2dcf330U, 0x860dec52U, 0xc177d0e3U,
     0xb32b6c16U, 0x70a999b9U, 0x9411fa48U, 0xe9472264U,
     0xfca8c48cU, 0xf0a01a3fU, 0x7d56d82cU, 0x3322ef90U,
     0x4987c74eU, 0x38d9c1d1U, 0xca8cfea2U, 0xd498360bU,
     0xf5a6cf81U, 0x7aa528deU, 0xb7da268eU, 0xad3fa4bfU,
     0x3a2ce49dU, 0x78500d92U, 0x5f6a9bccU, 0x7e546246U,
     0x8df6c213U, 0xd890e8b8U, 0x392e5ef7U, 0xc382f5afU,
     0x5d9fbe80U, 0xd0697c93U, 0xd56fa92dU, 0x25cfb312U,
     0xacc83b99U, 0x1810a77dU, 0x9ce86e63U, 0x3bdb7bbbU,
     0x26cd0978U, 0x596ef418U, 0x9aec01b7U, 0x4f83a89aU,
     0x95e6656eU, 0xffaa7ee6U, 0xbc2108cfU, 0x15efe6e8U,
     0xe7bad99bU, 0x6f4ace36U, 0x9fead409U, 0xb029d67cU,
     0xa431afb2U, 0x3f2a3123U, 0xa5c63094U, 0xa235c066U,
     0x4e7437bcU, 0x82fca6caU, 0x90e0b0d0U, 0xa73315d8U,
     0x04f14a98U, 0xec41f7daU, 0xcd7f0e50U, 0x91172ff6U,
     0x4d768dd6U, 0xef434db0U, 0xaacc544dU, 0x96e4df04U,
     0xd19ee3b5U, 0x6a4c1b88U, 0x2cc1b81fU, 0x65467f51U,
     0x5e9d04eaU, 0x8c015d35U, 0x87fa7374U, 0x0bfb2e41U,
     0x67b35a1dU, 0xdb9252d2U, 0x10e93356U, 0xd66d1347U,
     0xd79a8c61U, 0xa1377a0cU, 0xf8598e14U, 0x13eb893cU,
     0xa9ceee27U, 0x61b735c9U, 0x1ce1ede5U, 0x477a3cb1U,
     0xd29c59dfU, 0xf2553f73U, 0x141879ceU, 0xc773bf37U,
     0xf753eacdU, 0xfd5f5baaU, 0x3ddf146fU, 0x447886dbU,
     0xafca81f3U, 0x68b93ec4U, 0x24382c34U, 0xa3c25f40U,
     0x1d1672c3U, 0xe2bc0c25U, 0x3c288b49U, 0x0dff4195U,
     0xa8397101U, 0x0c08deb3U, 0xb4d89ce4U, 0x566490c1U,
     0xcb7b6184U, 0x32d570b6U, 0x6c48745cU, 0xb8d04257U,
};
static const uint32_t Td3_be[256] = {
     0x5150a7f4U, 0x7e536541U, 0x1ac3a417U, 0x3a965e27U,
     0x3bcb6babU, 0x1ff1459dU, 0xacab58faU, 0x4b9303e3U,
     0x2055fa30U, 0xadf66d76U, 0x889176ccU, 0xf5254c02U,
     0x4ffcd7e5U, 0xc5d7cb2aU, 0x26804435U, 0xb58fa362U,
     0xde495ab1U, 0x25671bbaU, 0x45980eeaU, 0x5de1c0feU,
     0xc302752fU, 0x8112f04cU, 0x8da39746U, 0x6bc6f9d3U,
     0x03e75f8fU, 0x15959c92U, 0xbfeb7a6dU, 0x95da5952U,
     0xd42d83beU, 0x58d32174U, 0x492969e0U, 0x8e44c8c9U,
     0x756a89c2U, 0xf478798eU, 0x996b3e58U, 0x27dd71b9U,
     0xbeb64fe1U, 0xf017ad88U, 0xc966ac20U, 0x7db43aceU,
     0x63184adfU, 0xe582311aU, 0x97603351U, 0x62457f53U,
     0xb1e07764U, 0xbb84ae6bU, 0xfe1ca081U, 0xf9942b08U,
     0x70586848U, 0x8f19fd45U, 0x94876cdeU, 0x52b7f87bU,
     0xab23d373U, 0x72e2024bU, 0xe3578f1fU, 0x662aab55U,
     0xb20728ebU, 0x2f03c2b5U, 0x869a7bc5U, 0xd3a50837U,
     0x30f28728U, 0x23b2a5bfU, 0x02ba6a03U, 0xed5c8216U,
     0x8a2b1ccfU, 0xa792b479U, 0xf3f0f207U, 0x4ea1e269U,
     0x65cdf4daU, 0x06d5be05U, 0xd11f6234U, 0xc48afea6U,
     0x349d532eU, 0xa2a055f3U, 0x0532e18aU, 0xa475ebf6U,
     0x0b39ec83U, 0x40aaef60U, 0x5e069f71U, 0xbd51106eU,
     0x3ef98a21U, 0x963d06ddU, 0xddae053eU, 0x4d46bde6U,
     0x91b58d54U, 0x71055dc4U, 0x046fd406U, 0x60ff1550U,
     0x1924fb98U, 0xd697e9bdU, 0x89cc4340U, 0x67779ed9U,
     0xb0bd42e8U, 0x07888b89U, 0xe7385b19U, 0x79dbeec8U,
     0xa1470a7cU, 0x7ce90f42U, 0xf8c91e84U, 0x00000000U,
     0x09838680U, 0x3248ed2bU, 0x1eac7011U, 0x6c4e725aU,
     0xfdfbff0eU, 0x0f563885U, 0x3d1ed5aeU, 0x3627392dU,
     0x0a64d90fU, 0x6821a65cU, 0x9bd1545bU, 0x243a2e36U,
     0x0cb1670aU, 0x930fe757U, 0xb4d296eeU, 0x1b9e919bU,
     0x804fc5c0U, 0x61a220dcU, 0x5a694b77U, 0x1c161a12U,
     0xe20aba93U, 0xc0e52aa0U, 0x3c43e022U, 0x121d171bU,
     0x0e0b0d09U, 0xf2adc78bU, 0x2db9a8b6U, 0x14c8a91eU,
     0x578519f1U, 0xaf4c0775U, 0xeebbdd99U, 0xa3fd607fU,
     0xf79f2601U, 0x5cbcf572U, 0x44c53b66U, 0x5b347efbU,
     0x8b762943U, 0xcbdcc623U, 0xb668fcedU, 0xb863f1e4U,
     0xd7cadc31U, 0x42108563U, 0x13402297U, 0x842011c6U,
     0x857d244aU, 0xd2f83dbbU, 0xae1132f9U, 0xc76da129U,
     0x1d4b2f9eU, 0xdcf330b2U, 0x0dec5286U, 0x77d0e3c1U,
     0x2b6c16b3U, 0xa999b970U, 0x11fa4894U, 0x472264e9U,
     0xa8c48cfcU, 0xa01a3ff0U, 0x56d82c7dU, 0x22ef9033U,
     0x87c74e49U, 0xd9c1d138U, 0x8cfea2caU, 0x98360bd4U,
     0xa6cf81f5U, 0xa528de7aU, 0xda268eb7U, 0x3fa4bfadU,
     0x2ce49d3aU, 0x500d9278U, 0x6a9bcc5fU, 0x5462467eU,
     0xf6c2138dU, 0x90e8b8d8U, 0x2e5ef739U, 0x82f5afc3U,
     0x9fbe805dU, 0x697c93d0U, 0x6fa92dd5U, 0xcfb31225U,
     0xc83b99acU, 0x10a77d18U, 0xe86e639cU, 0xdb7bbb3bU,
     0xcd097826U, 0x6ef41859U, 0xec01b79aU, 0x83a89a4fU,
     0xe6656e95U, 0xaa7ee6ffU, 0x2108cfbcU, 0xefe6e815U,
     0xbad99be7U, 0x4ace366fU, 0xead4099fU, 0x29d67cb0U,
     0x31afb2a4U, 0x2a31233fU, 0xc63094a5U, 0x35c066a2U,
     0x7437bc4eU, 0xfca6ca82U, 0xe0b0d090U, 0x3315d8a7U,
     0xf14a9804U, 0x41f7daecU, 0x7f0e50cdU, 0x172ff691U,
     0x768dd64dU, 0x434db0efU, 0xcc544daaU, 0xe4df0496U,
     0x9ee3b5d1U, 0x4c1b886aU, 0xc1b81f2cU, 0x467f5165U,
     0x9d04ea5eU, 0x015d358cU, 0xfa737487U, 0xfb2e410bU,
     0xb35a1d67U, 0x9252d2dbU, 0xe9335610U, 0x6d1347d6U,
     0x9a8c61d7U, 0x377a0ca1U, 0x598e14f8U, 0xeb893c13U,
     0xceee27a9U, 0xb735c961U, 0xe1ede51cU, 0x7a3cb147U,
     0x9c59dfd2U, 0x553f73f2U, 0x1879ce14U, 0x73bf37c7U,
     0x53eacdf7U, 0x5f5baafdU, 0xdf146f3dU, 0x7886db44U,
     0xca81f3afU, 0xb93ec468U, 0x382c3424U, 0xc25f40a3U,
     0x1672c31dU, 0xbc0c25e2U, 0x288b493cU, 0xff41950dU,
     0x397101a8U, 0x08deb30cU, 0xd89ce4b4U, 0x6490c156U,
     0x7b6184cbU, 0xd570b632U, 0x48745c6cU, 0xd04257b8U,
};
static const uint8_t Td4_be[256] = {
    0x52U, 0x09U, 0x6aU, 0xd5U, 0x30U, 0x36U, 0xa5U, 0x38U,
    0xbfU, 0x40U, 0xa3U, 0x9eU, 0x81U, 0xf3U, 0xd7U, 0xfbU,
    0x7cU, 0xe3U, 0x39U, 0x82U, 0x9bU, 0x2fU, 0xffU, 0x87U,
    0x34U, 0x8eU, 0x43U, 0x44U, 0xc4U, 0xdeU, 0xe9U, 0xcbU,
    0x54U, 0x7bU, 0x94U, 0x32U, 0xa6U, 0xc2U, 0x23U, 0x3dU,
    0xeeU, 0x4cU, 0x95U, 0x0bU, 0x42U, 0xfaU, 0xc3U, 0x4eU,
    0x08U, 0x2eU, 0xa1U, 0x66U, 0x28U, 0xd9U, 0x24U, 0xb2U,
    0x76U, 0x5bU, 0xa2U, 0x49U, 0x6dU, 0x8bU, 0xd1U, 0x25U,
    0x72U, 0xf8U, 0xf6U, 0x64U, 0x86U, 0x68U, 0x98U, 0x16U,
    0xd4U, 0xa4U, 0x5cU, 0xccU, 0x5dU, 0x65U, 0xb6U, 0x92U,
    0x6cU, 0x70U, 0x48U, 0x50U, 0xfdU, 0xedU, 0xb9U, 0xdaU,
    0x5eU, 0x15U, 0x46U, 0x57U, 0xa7U, 0x8dU, 0x9dU, 0x84U,
    0x90U, 0xd8U, 0xabU, 0x00U, 0x8cU, 0xbcU, 0xd3U, 0x0aU,
    0xf7U, 0xe4U, 0x58U, 0x05U, 0xb8U, 0xb3U, 0x45U, 0x06U,
    0xd0U, 0x2cU, 0x1eU, 0x8fU, 0xcaU, 0x3fU, 0x0fU, 0x02U,
    0xc1U, 0xafU, 0xbdU, 0x03U, 0x01U, 0x13U, 0x8aU, 0x6bU,
    0x3aU, 0x91U, 0x11U, 0x41U, 0x4fU, 0x67U, 0xdcU, 0xeaU,
    0x97U, 0xf2U, 0xcfU, 0xceU, 0xf0U, 0xb4U, 0xe6U, 0x73U,
    0x96U, 0xacU, 0x74U, 0x22U, 0xe7U, 0xadU, 0x35U, 0x85U,
    0xe2U, 0xf9U, 0x37U, 0xe8U, 0x1cU, 0x75U, 0xdfU, 0x6eU,
    0x47U, 0xf1U, 0x1aU, 0x71U, 0x1dU, 0x29U, 0xc5U, 0x89U,
    0x6fU, 0xb7U, 0x62U, 0x0eU, 0xaaU, 0x18U, 0xbeU, 0x1bU,
    0xfcU, 0x56U, 0x3eU, 0x4bU, 0xc6U, 0xd2U, 0x79U, 0x20U,
    0x9aU, 0xdbU, 0xc0U, 0xfeU, 0x78U, 0xcdU, 0x5aU, 0xf4U,
    0x1fU, 0xddU, 0xa8U, 0x33U, 0x88U, 0x07U, 0xc7U, 0x31U,
    0xb1U, 0x12U, 0x10U, 0x59U, 0x27U, 0x80U, 0xecU, 0x5fU,
    0x60U, 0x51U, 0x7fU, 0xa9U, 0x19U, 0xb5U, 0x4aU, 0x0dU,
    0x2dU, 0xe5U, 0x7aU, 0x9fU, 0x93U, 0xc9U, 0x9cU, 0xefU,
    0xa0U, 0xe0U, 0x3bU, 0x4dU, 0xaeU, 0x2aU, 0xf5U, 0xb0U,
    0xc8U, 0xebU, 0xbbU, 0x3cU, 0x83U, 0x53U, 0x99U, 0x61U,
    0x17U, 0x2bU, 0x04U, 0x7eU, 0xbaU, 0x77U, 0xd6U, 0x26U,
    0xe1U, 0x69U, 0x14U, 0x63U, 0x55U, 0x21U, 0x0cU, 0x7dU,
};

int main()
{
	// This file test how the OpenSSL library
	// implement AES rounds using t-boxes

	// From NIST 197 test vectors
	// 
	// Round input
	// -----------
	// 19 a0 9a e9
	// 3d f4 c6 f8
	// e3 e2 8d 48
	// be 2b 2a 08
	//
	unsigned char i0[4] = {0x19,0xa0,0x9a,0xe9};
	unsigned char i1[4] = {0x3d,0xf4,0xc6,0xf8};
	unsigned char i2[4] = {0xe3,0xe2,0x8d,0x48};
	unsigned char i3[4] = {0xbe,0x2b,0x2a,0x08};

	// En realidad el input es por columnas
	unsigned char j0[4] = {0x19,0x3d,0xe3,0xbe};
	unsigned char j1[4] = {0xa0,0xf4,0xe2,0x2b};
	unsigned char j2[4] = {0x9a,0xc6,0x8d,0x2a};
	unsigned char j3[4] = {0xe9,0xf8,0x48,0x08};
	// Operar en formato big-endian (si la máquina es little)
	// y saltarnos el paso de convertir los datos a little-endian
	uint32_t j0be = *((uint32_t*)j0);
	uint32_t j1be = *((uint32_t*)j1);
	uint32_t j2be = *((uint32_t*)j2);
	uint32_t j3be = *((uint32_t*)j3);

	// integer operators
	//
	// s0 = 19 a0 9a e9
	// s1 = 3d f4 c6 f8
	// s2 = e3 e2 8d 48
	// s3 = b3 2b 2a 08
	//
	uint32_t s0 = *((uint32_t*)i0);
	uint32_t s1 = *((uint32_t*)i1);
	uint32_t s2 = *((uint32_t*)i2);
	uint32_t s3 = *((uint32_t*)i3);
	hexdump("s0",(unsigned char*)&s0,4);
	hexdump("s1",(unsigned char*)&s1,4);
	hexdump("s2",(unsigned char*)&s2,4);
	hexdump("s3",(unsigned char*)&s3,4);

	// machine format (little-endian)
	uint32_t s0le = 0x19a09ae9;
	uint32_t s1le = 0x3df4c6f8;
	uint32_t s2le = 0xe3e28d48;
	uint32_t s3le = 0xbe2b2a08;
	hexdump("s0le",(unsigned char*)&s0le,4);
	hexdump("s1le",(unsigned char*)&s1le,4);
	hexdump("s2le",(unsigned char*)&s2le,4);
	hexdump("s3le",(unsigned char*)&s3le,4);

	unsigned char* s0le_byte = (unsigned char*)&s0le;
	unsigned char* s1le_byte = (unsigned char*)&s1le;
	unsigned char* s2le_byte = (unsigned char*)&s2le;
	unsigned char* s3le_byte = (unsigned char*)&s3le;

	uint32_t keyle_w1 = 0xa088232a;
	uint32_t keyle_w2 = 0xfa54a36c;
	uint32_t keyle_w3 = 0xfe2c3976;
	uint32_t keyle_w4 = 0x17b13905;

	// Because of little-endianess
	// 19 a9 9a e9, for example, is shifted to:
	//  a9 9a e9 00 (>> 8)
	//  9a e9 00 00 (>> 16)
	//  e9 00 00 00 (>> 24)
	//
	// Con una mascara 0xff nos podemos
	// quedar con los dos primeros bytes
	//  0x9ae90000 & 0xff000000 -> 0x9a000000
	//  0xa99ae900 & 0xff000000 -> 0xa9000000
	//
	// En resumen, cada uno de los bytes del
	// estado de entrada es equivalente a:
	//  a00=s0&0xff a01=(s0>>8)&0xff a02=(s0>>16)&0xff a03=(s0>>24)
	//  a10=s1&0xff a11=(s1>>8)&0xff a12=(s1>>16)&0xff a13=(s1>>24)
	//  a20=s2&0xff a21=(s2>>8)&0xff a22=(s2>>16)&0xff a23=(s2>>24)
	//  a30=s3&0xff a31=(s3>>8)&0xff a32=(s3>>16)&0xff a33=(s3>>24)
	//
	// Para este ejemplo:
	//  19=s0&0xff a0=(s0>>8)&0xff 9a=(s0>>16)&0xff e9=(s0>>24)
	//  3d=s1&0xff f4=(s1>>8)&0xff c6=(s1>>16)&0xff f8=(s1>>24)
	//  e3=s2&0xff e2=(s2>>8)&0xff 8d=(s2>>16)&0xff 48=(s2>>24)
	//  b3=s3&0xff 2b=(s3>>8)&0xff 2a=(s3>>16)&0xff 08=(s3>>24)
	//

	uint32_t s0_shift24 = s0 >> 24;
	uint32_t s1_shift24 = s1 >> 24;
	uint32_t s2_shift24 = s2 >> 24;
	uint32_t s3_shift24 = s3 >> 24;
	hexdump("s0_shift24",(unsigned char*)&s0_shift24,4);
	hexdump("s1_shift24",(unsigned char*)&s1_shift24,4);
	hexdump("s2_shift24",(unsigned char*)&s2_shift24,4);
	hexdump("s3_shift24",(unsigned char*)&s3_shift24,4);

	uint32_t s0_shift16 = s0 >> 16;
	uint32_t s1_shift16 = s1 >> 16;
	uint32_t s2_shift16 = s2 >> 16;
	uint32_t s3_shift16 = s3 >> 16;
	hexdump("s0_shift16",(unsigned char*)&s0_shift16,4);
	hexdump("s1_shift16",(unsigned char*)&s1_shift16,4);
	hexdump("s2_shift16",(unsigned char*)&s2_shift16,4);
	hexdump("s3_shift16",(unsigned char*)&s3_shift16,4);
	uint32_t s0_shift16andFF = s0_shift16 & 0xff;
	uint32_t s1_shift16andFF = s1_shift16 & 0xff;
	uint32_t s2_shift16andFF = s2_shift16 & 0xff;
	uint32_t s3_shift16andFF = s3_shift16 & 0xff;
	hexdump("s0_shift16andFF",(unsigned char*)&s0_shift16andFF,4);
	hexdump("s1_shift16andFF",(unsigned char*)&s1_shift16andFF,4);
	hexdump("s2_shift16andFF",(unsigned char*)&s2_shift16andFF,4);
	hexdump("s3_shift16andFF",(unsigned char*)&s3_shift16andFF,4);

	uint32_t s0_shift8 = s0 >> 8;
	uint32_t s1_shift8 = s1 >> 8;
	uint32_t s2_shift8 = s2 >> 8;
	uint32_t s3_shift8 = s3 >> 8;
	hexdump("s0_shift8",(unsigned char*)&s0_shift8,4);
	hexdump("s1_shift8",(unsigned char*)&s1_shift8,4);
	hexdump("s2_shift8",(unsigned char*)&s2_shift8,4);
	hexdump("s3_shift8",(unsigned char*)&s3_shift8,4);
	uint32_t s0_shift8andFF = s0_shift8 & 0xff;
	uint32_t s1_shift8andFF = s1_shift8 & 0xff;
	uint32_t s2_shift8andFF = s2_shift8 & 0xff;
	uint32_t s3_shift8andFF = s3_shift8 & 0xff;
	hexdump("s0_shift8andFF",(unsigned char*)&s0_shift8andFF,4);
	hexdump("s1_shift8andFF",(unsigned char*)&s1_shift8andFF,4);
	hexdump("s2_shift8andFF",(unsigned char*)&s2_shift8andFF,4);
	hexdump("s3_shift8andFF",(unsigned char*)&s3_shift8andFF,4);

	//
	// Segun implementacion OpenSSL la salida e es:
	//  e0 = T0[a03] ^ T1[a12] ^ T2[a21] ^ T3[a30] ^ K0
	//  e1 = T0[a13] ^ T1[a22] ^ T2[a31] ^ T3[a00] ^ K1
	//  e2 = T0[a23] ^ T1[a32] ^ T2[a01] ^ T3[a10] ^ K2
	//  e3 = T0[a33] ^ T1[a02] ^ T2[a11] ^ T3[a20] ^ K3
	//
	// Pero dado que OpenSSL opera con little endian, en realidad:
	// (se cambian los numeros de columnas 0 por 3, 3 por 0, 2 por 1, y 1 por 2)
	//  e0 = T0[a00] ^ T1[a11] ^ T2[a22] ^ T3[a33] ^ K0
	//  e1 = T0[a10] ^ T1[a21] ^ T2[a32] ^ T3[a03] ^ K1
	//  e2 = T0[a20] ^ T1[a31] ^ T2[a02] ^ T3[a13] ^ K2
	//  e3 = T0[a30] ^ T1[a01] ^ T2[a12] ^ T3[a23] ^ K3
	//
//	LOG_DEBUG(boost::format("(s0le >> 16) & 0xff => %02x") % ((s0le >> 16) & 0xff)); // (s0le >> 16) & 0xff => a0
//	LOG_DEBUG(boost::format("(s1le >> 16) & 0xff => %02x") % ((s1le >> 16) & 0xff)); // (s1le >> 16) & 0xff => f4
//	LOG_DEBUG(boost::format("(s2le >> 16) & 0xff => %02x") % ((s2le >> 16) & 0xff)); // (s2le >> 16) & 0xff => e2
//	LOG_DEBUG(boost::format("(s3le >> 16) & 0xff => %02x") % ((s3le >> 16) & 0xff)); // (s3le >> 16) & 0xff => 2b

//	// Se pasa a formato especifico de OpenSSL
//	uint32_t ssl_s0 = GETU32(i0);
//	uint32_t ssl_s1 = GETU32(i1);
//	uint32_t ssl_s2 = GETU32(i2);
//	uint32_t ssl_s3 = GETU32(i3);
//	hexdump("ssl_s0",(unsigned char*)&ssl_s0,4);
//	hexdump("ssl_s1",(unsigned char*)&ssl_s1,4);
//	hexdump("ssl_s2",(unsigned char*)&ssl_s2,4);
//	hexdump("ssl_s3",(unsigned char*)&ssl_s3,4);
//	{
//	uint32_t ss0 = ssl_s0;
//	uint32_t ss1 = ssl_s1;
//	uint32_t ss2 = ssl_s2;
//	uint32_t ss3 = ssl_s3;
//	uint32_t t0 = Td0[ss0 >> 24] ^ Td1[(ss3 >> 16) & 0xff] ^ Td2[(ss2 >>  8) & 0xff] ^ Td3[ss1 & 0xff]; //^ keyle_w1;
//	uint32_t t1 = Td0[ss1 >> 24] ^ Td1[(ss0 >> 16) & 0xff] ^ Td2[(ss3 >>  8) & 0xff] ^ Td3[ss2 & 0xff]; //^ keyle_w2;
//	uint32_t t2 = Td0[ss2 >> 24] ^ Td1[(ss1 >> 16) & 0xff] ^ Td2[(ss0 >>  8) & 0xff] ^ Td3[ss3 & 0xff]; //^ keyle_w3;
//	uint32_t t3 = Td0[ss3 >> 24] ^ Td1[(ss2 >> 16) & 0xff] ^ Td2[(ss1 >>  8) & 0xff] ^ Td3[ss0 & 0xff]; //^ keyle_w4;
//	hexdump("t0",(unsigned char*)&t0,4);
//	hexdump("t1",(unsigned char*)&t1,4);
//	hexdump("t2",(unsigned char*)&t2,4);
//	hexdump("t3",(unsigned char*)&t3,4);
//	}

    // nota como el resultado se devuelve el little endian porque

	// Según Rijndael Amended (by Joan Daemen and Vincent Rijmen)
	//
    // la salida 'e' de la ronda:
	//  ej  e0 (j=0)  e1 (j=1) e2 (j=2) e3 (j=3)
	//      |         |        |        |
	//      e00       e01
	//      e10       e11
	//      e20       e21
	//      e30       e31
	//
	// e0 = e00 e01 e02 e03 = T0[a(0,0)] ^ T1[a(1,0-C1)] ^ T1[a(2,0-C2)] ^  T1[a(3,0-C3)] ^ K0(columna 0)
	// e1 = e10 e11 e12 e13 = T0[a(0,1)] ^ T1[a(1,1-C1)] ^ T1[a(2,1-C2)] ^  T1[a(3,1-C3)] ^ K0(columna 1)
	//                      = T0[a(0,1)] ^ T1[a(1,2)]    ^ T1[a(2,3)]    ^  T1[a(3,0)]    ^ K0(columna 1)
	// e2 = e20 e21 e22 e23 = T0[a(0,2)] ^ T1[a(1,2-C1)] ^ T1[a(2,2-C2)] ^  T1[a(3,2-C3)] ^ K0(columna 2)
	//                      = T0[a(0,2)] ^ T1[a(1,3)]    ^ T1[a(2,0)]    ^  T1[a(3,1)]    ^ K0(columna 2)
	// e3 = e30 e31 e32 e33 = T0[a(0,3)] ^ T1[a(1,3-C1)] ^ T1[a(2,3-C2)] ^  T1[a(3,3-C3)] ^ K0(columna 3)
	//                      = T0[a(0,3)] ^ T1[a(1,0)]    ^ T1[a(2,1)]    ^  T1[a(3,2)]    ^ K0(columna 3)
	//
    // e0 = e00 e01 e02 e03 = T0[a(0,0)] ^ T1[a(1,0-C1)] ^ T1[a(2,0-C2)] ^  T1[a(3,0-C3)] ^ K0(columna 0)
	// e1 = e10 e11 e12 e13 = T0[a(0,1)] ^ T1[a(1,2)]    ^ T1[a(2,3)]    ^  T1[a(3,0)]    ^ K0(columna 1)
	// e2 = e20 e21 e22 e23 = T0[a(0,2)] ^ T1[a(1,3)]    ^ T1[a(2,0)]    ^  T1[a(3,1)]    ^ K0(columna 2)
	// e3 = e30 e31 e32 e33 = T0[a(0,3)] ^ T1[a(1,0)]    ^ T1[a(2,1)]    ^  T1[a(3,2)]    ^ K0(columna 3)

	LOG_DEBUG(boost::format("i0[1] => 0x%02x") % (int)i0[1]);
	LOG_DEBUG(boost::format("Te0[i0[1]] => 0x%x") % Te0[i0[0]]);
	LOG_DEBUG(boost::format("i1[2] => 0x%02x") % (int)i1[2]);
	LOG_DEBUG(boost::format("Te1[i1[2]] => 0x%x") % Te1[i1[2]]);
	LOG_DEBUG(boost::format("i02[3] => 0x%02x") % (int)i2[3]);
	LOG_DEBUG(boost::format("Te2[i2[3]] => 0x%x") % Te2[i2[3]]);
	LOG_DEBUG(boost::format("i3[0] => 0x%02x") % (int)i3[0]);
	LOG_DEBUG(boost::format("Te3[i3[0]] => 0x%x") % Te3[i3[0]]);
	uint32_t e0 = Te0[i0[0]] ^ Te1[i1[1]] ^ Te2[i2[2]] ^ Te3[i3[3]];
	uint32_t e1 = Te0[i0[1]] ^ Te1[i1[2]] ^ Te2[i2[3]] ^ Te3[i3[0]];
	uint32_t e2 = Te0[i0[2]] ^ Te1[i1[3]] ^ Te2[i2[0]] ^ Te3[i3[1]];
	uint32_t e3 = Te0[i0[3]] ^ Te1[i1[0]] ^ Te2[i2[1]] ^ Te3[i3[2]];
	hexdump("e0",(unsigned char*)&e0,4); // Resultado en Little-Endian correcto: e0  0000 e5 81 66 04
	hexdump("e1",(unsigned char*)&e1,4); // Resultado en Little-Endian correcto: e1  0000 9a 19 cb e0
	hexdump("e2",(unsigned char*)&e2,4); // Resultado en Little-Endian correcto: e2  0000 7a d3 f8 48
	hexdump("e3",(unsigned char*)&e3,4); // Resultado en Little-Endian correcto: e3  0000 4c 26 06 28


	hexdump("j0be",(unsigned char*)&j0be,4);
	hexdump("j1be",(unsigned char*)&j1be,4);
	hexdump("j2be",(unsigned char*)&j2be,4);
	hexdump("j3be",(unsigned char*)&j3be,4);
	// Similar a openssl pero operamos en big-endian y nos saltamos el paso GETU32 que
	// convierte los datos de entrada a little-endian (para ello usamos las tablas con
	// orden de byte invertido T**_be)
	LOG_TRACE(boost::format("openssl-big-endian: (j0be)&0xff => 0x%02x") % (int)((j0be      ) & 0xff));
	LOG_TRACE(boost::format("openssl-big-endian: (j1be >> 8)&0xff => 0x%02x") % (int)((j1be >>  8) & 0xff));
	LOG_TRACE(boost::format("openssl-big-endian: (j2be >> 16)&0xff => 0x%02x") % (int)((j2be >> 16) & 0xff));
	LOG_TRACE(boost::format("openssl-big-endian: (j3be >> 24) => 0x%02x") % (int)((j3be >> 24)       ));
    uint32_t t0 =
        Te0_be[(j0be      ) & 0xff] ^
        Te1_be[(j1be >>  8) & 0xff] ^
        Te2_be[(j2be >> 16) & 0xff] ^
        Te3_be[(j3be >> 24)       ];
    uint32_t t1 =
        Te0_be[(j1be      ) & 0xff] ^
        Te1_be[(j2be >>  8) & 0xff] ^
        Te2_be[(j3be >> 16) & 0xff] ^
        Te3_be[(j0be >> 24)       ];
    uint32_t t2 =
        Te0_be[(j2be      ) & 0xff] ^
        Te1_be[(j3be >>  8) & 0xff] ^
        Te2_be[(j0be >> 16) & 0xff] ^
        Te3_be[(j1be >> 24)       ];
    uint32_t t3 =
        Te0_be[(j3be      ) & 0xff] ^
        Te1_be[(j0be >>  8) & 0xff] ^
        Te2_be[(j1be >> 16) & 0xff] ^
        Te3_be[(j2be >> 24)       ];
	hexdump("t0",(unsigned char*)&t0,4);
	hexdump("t1",(unsigned char*)&t1,4);
	hexdump("t2",(unsigned char*)&t2,4);
	hexdump("t3",(unsigned char*)&t3,4);
	// Para desencriptar hay que hacer el mismo paso con TdX_be
//	[2017-04-11 18:17:52.136681] [0x00007ff5ec390780] [trace]   round 4849664: s0 => 0xe9317db5
//	[2017-04-11 18:17:52.136700] [0x00007ff5ec390780] [trace]   round 4849664: s1 => 0xcb322c72
//	[2017-04-11 18:17:52.136721] [0x00007ff5ec390780] [trace]   round 4849664: s2 => 0x3d2e895f
//	[2017-04-11 18:17:52.136740] [0x00007ff5ec390780] [trace]   round 4849664: s3 => 0xaf090794
//	[2017-04-11 18:17:52.136760] [0x00007ff5ec390780] [trace]   round 5: k[0] => 0x0c7b5a63
//	[2017-04-11 18:17:52.136789] [0x00007ff5ec390780] [trace]   round 5: k[1] => 0x1319eafe
//	[2017-04-11 18:17:52.136824] [0x00007ff5ec390780] [trace]   round 5: k[2] => 0xb0398890
//	[2017-04-11 18:17:52.136855] [0x00007ff5ec390780] [trace]   round 5: k[3] => 0x664cfbb4
//	[2017-04-11 18:17:52.136885] [0x00007ff5ec390780] [trace]   round 5: t0 => 0x876e46a6
//	[2017-04-11 18:17:52.136915] [0x00007ff5ec390780] [trace]   round 5: t1 => 0xf24ce78c
//	[2017-04-11 18:17:52.136944] [0x00007ff5ec390780] [trace]   round 5: t2 => 0x4d904ad8
//	[2017-04-11 18:17:52.136974] [0x00007ff5ec390780] [trace]   round 5: t3 => 0x97ecc395
	{
		unsigned char k0[4] = {0x0c, 0x7b, 0x5a, 0x63};, 0x
		unsigned char k1[4] = {0x13, 0x19, 0xea, 0xfe};
		unsigned char k2[4] = {0xb0, 0x39, 0x88, 0x90};
		unsigned char k3[4] = {0x66, 0x4c, 0xfb, 0xb4};

		// En realidad el input es por columnas
		unsigned char j0[4] = {0xe9,0x31,0x7d,0xb5};
		unsigned char j1[4] = {0xcb,0x32,0x2c,0x72};
		unsigned char j2[4] = {0x3d,0x2e,0x89,0x5f};
		unsigned char j3[4] = {0xaf,0x09,0x07,0x94};
		// Operar en formato big-endian (si la máquina es little)
		// y saltarnos el paso de convertir los datos a little-endian
		uint32_t j0be = *((uint32_t*)j0);
		uint32_t j1be = *((uint32_t*)j1);
		uint32_t j2be = *((uint32_t*)j2);
		uint32_t j3be = *((uint32_t*)j3);
		hexdump("j0be",(unsigned char*)&j0be,4);
		hexdump("j1be",(unsigned char*)&j1be,4);
		hexdump("j2be",(unsigned char*)&j2be,4);
		hexdump("j3be",(unsigned char*)&j3be,4);
		uint32_t t0d =
			Td0_be[(j0be      ) & 0xff] ^
			Td1_be[(j3be >>  8) & 0xff] ^
			Td2_be[(j2be >> 16) & 0xff] ^
			Td3_be[(j1be >> 24)       ]; //TODO addkey
		uint32_t t1d =
			Td0_be[(j1be      ) & 0xff] ^
			Td1_be[(j0be >>  8) & 0xff] ^
			Td2_be[(j3be >> 16) & 0xff] ^
			Td3_be[(j2be >> 24)       ];
		uint32_t t2d =
			Td0_be[(j2be      ) & 0xff] ^
			Td1_be[(j1be >>  8) & 0xff] ^
			Td2_be[(j0be >> 16) & 0xff] ^
			Td3_be[(j3be >> 24)       ];
		uint32_t t3d =
			Td0_be[(j3be      ) & 0xff] ^
			Td1_be[(j2be >>  8) & 0xff] ^
			Td2_be[(j1be >> 16) & 0xff] ^
			Td3_be[(j0be >> 24)       ];
		hexdump("t0d",(unsigned char*)&t0d,4);
		hexdump("t1d",(unsigned char*)&t1d,4);
		hexdump("t2d",(unsigned char*)&t2d,4);
		hexdump("t3d",(unsigned char*)&t3d,4);
	}

	unsigned char j0_[4] = {0xeb,0x40,0xf2,0x1e};
	unsigned char j1_[4] = {0x59,0x2e,0x38,0x84};
	unsigned char j2_[4] = {0x8b,0xa1,0x13,0xe7};
	unsigned char j3_[4] = {0x1b,0xc3,0x42,0xd2};
	// Operar en formato big-endian (si la máquina es little)
	// y saltarnos el paso de convertir los datos a little-endian
	j0be = *((uint32_t*)j0_);
	j1be = *((uint32_t*)j1_);
	j2be = *((uint32_t*)j2_);
	j3be = *((uint32_t*)j3_);
	hexdump("j0be(j0_)",(unsigned char*)&j0be,4);
	hexdump("j1be(j1_)",(unsigned char*)&j1be,4);
	hexdump("j2be(j2_)",(unsigned char*)&j2be,4);
	hexdump("j3be(j3_)",(unsigned char*)&j3be,4);
    //LOG_TRACE(boost::format("last: (j0be) & 0xff => 0x%x") % ((j0be      ) & 0xff));
    //LOG_TRACE(boost::format("last: Te2[ (j0be) & 0xff] => 0x%x") % Te2[(t0 >> 24)]);
    //LOG_TRACE(boost::format("last: Te2[(t0 >> 24)] & 0xff000000 => 0x%x") % (Te2[(t0 >> 24)]&0xff000000));
    uint32_t out0 =
        (Te2_be[(j0be      ) & 0xff] & 0x000000ff) ^
        (Te3_be[(j1be >>  8) & 0xff] & 0x0000ff00) ^
        (Te0_be[(j2be >> 16) & 0xff] & 0x00ff0000) ^
        (Te1_be[(j3be >> 24)       ] & 0xff000000);
    uint32_t out1 =
        (Te2_be[(j1be      ) & 0xff] & 0x000000ff) ^
        (Te3_be[(j2be >>  8) & 0xff] & 0x0000ff00) ^
        (Te0_be[(j3be >> 16) & 0xff] & 0x00ff0000) ^
        (Te1_be[(j0be >> 24)       ] & 0xff000000);
    uint32_t out2 =
        (Te2_be[(j2be      ) & 0xff] & 0x000000ff) ^
        (Te3_be[(j3be >>  8) & 0xff] & 0x0000ff00) ^
        (Te0_be[(j0be >> 16) & 0xff] & 0x00ff0000) ^
        (Te1_be[(j1be >> 24)       ] & 0xff000000);
    uint32_t out3 =
        (Te2_be[(j3be      ) & 0xff] & 0x000000ff) ^
        (Te3_be[(j0be >>  8) & 0xff] & 0x0000ff00) ^
        (Te0_be[(j1be >> 16) & 0xff] & 0x00ff0000) ^
        (Te1_be[(j2be >> 24)       ] & 0xff000000);
	hexdump("out0",(unsigned char*)&out0,4);
	hexdump("out1",(unsigned char*)&out1,4);
	hexdump("out2",(unsigned char*)&out2,4);
	hexdump("out3",(unsigned char*)&out3,4);

	return 0;
}
