#include "CudaEcbAes16B.cuh"

__device__ void cuda_ecb_aes_16b__add_round_key(unsigned char data[],
						int n_blocks,
						uint32_t * expanded_key,
						int rounds)
{
	int iBlock = blockIdx.x * blockDim.x;

	#pragma unroll
	for(int w = 0; w < 4; w++) {
		uint32_t* data_word = ((uint32_t*)data)+iBlock+w;
	    uint32_t key_word = expanded_key+iBlock+w;
	}


	uint32_t key_w1 = expanded_key
}

__global__ void cuda_ecb_aes_16b_encrypt_kernel(unsigned char data[],
						int n_blocks,
						uint32_t * expanded_key,
						int rounds)
{


}


__global__ void cuda_ecb_aes_16b_decrypt_kernel(unsigned char data[],
						int n_blocks,
						uint32_t * expanded_key,
						int rounds)
{


}

void cuda_ecb_aes_16b_encrypt(int gridSize, int threadsPerBlock,
			      unsigned char data[], int n_blocks,
			      uint32_t * expanded_key, int rounds)
{
    cuda_ecb_aes_16b_encrypt_kernel <<< gridSize,
	threadsPerBlock >>> (data, n_blocks, expanded_key, rounds);
}


void cuda_ecb_aes_16b_decrypt(int gridSize, int threadsPerBlock,
			      unsigned char data[], int n_blocks,
			      uint32_t * expanded_key, int rounds)
{
    cuda_ecb_aes_16b_decrypt_kernel <<< gridSize,
	threadsPerBlock >>> (data, n_blocks, expanded_key, rounds);
}
