#include "CudaEcbAes16B.cuh"

//#define aes_add_16B_round_key \
//( \
//		data_u32_w1, data_u32_w2, data_u32_w3, data_u32_w4 \
//		key_u32_w1, key_u32_w1, key_u32_w1, key_u32_w1 \
//) \
//{ \
//	(data_u32_w1) = (data_u32_w1) ^ (key_u32_w1); \
//	(data_u32_w2) = (data_u32_w2) ^ (key_u32_w2); \
//	(data_u32_w3) = (data_u32_w3) ^ (key_u32_w3); \
//	(data_u32_w4) = (data_u32_w4) ^ (key_u32_w4); \
//}

__device__ __forceinline__ void aes_add_16B_round_key
	(
		uint32_t data1,
		uint32_t data2,
		uint32_t data3,
		uint32_t data4,
		uint32_t key1,
		uint32_t key2,
		uint32_t key3,
		uint32_t key4
	)
{
#ifdef DEBUG
#endif
	data1 = data1 ^ key1;
	data2 = data2 ^ key2;
	data3 = data3 ^ key3;
	data4 = data4 ^ key4;
}

//__device__ cuda_aes_ttable

//// TODO inline y no guardar/acceder a memoria
//// recibir directamente los w1,w2,w3,w4 de la
//// clave y del state
////
//// Ver codigo objeto tras compilar
////
//// http://docs.nvidia.com/cuda/cuda-binary-utilities/#cuobjdump
//// cuobjdumo extrae codigo objeto
//__device__ inline void cuda_ecb_aes_16b__add_round_key(
//						uint32_t data_w1,
//						uint32_t data_w2,
//						uint32_t data_w3,
//						uint32_t data_w4,
//						uint32_t key_w1,
//						uint32_t key_w2,
//						uint32_t key_w3,
//						uint32_t key_w4
//						)
//{
//	data_w1 =
//
//	int iBlock = blockIdx.x * blockDim.x;
//
//	#pragma unroll
//	for(int w = 0; w < 4; w++) {
//		uint32_t* data_word_ptr = ((uint32_t*)data)+iBlock+w;
//		uint32_t data_word = (*data_word_ptr);
//	    uint32_t key_word = ((uint32_t*)expanded_key)[iBlock+w];
//	    (*data_word_ptr) = key_word ^ data_word;
//	}
//}

__global__ void cuda_ecb_aes_16b_encrypt_kernel(
						unsigned char data[],
						int n_blocks,
						unsigned char expanded_key[])
{


}


__global__ void cuda_ecb_aes_16b_decrypt_kernel(unsigned char data[],
						int n_blocks,
						unsigned char expanded_key[])
{


}

void cuda_ecb_aes_16b_encrypt(int gridSize, int threadsPerBlock,
			      unsigned char data[], int n_blocks,
			      unsigned char expanded_key[], int rounds)
{
//    cuda_ecb_aes_16b_encrypt_kernel <<< gridSize,
//	threadsPerBlock >>> (data, n_blocks, expanded_key, rounds);
}


void cuda_ecb_aes_16b_decrypt(int gridSize, int threadsPerBlock,
			      unsigned char data[], int n_blocks,
			      unsigned char expanded_key[], int rounds)
{
//    cuda_ecb_aes_16b_decrypt_kernel <<< gridSize,
//	threadsPerBlock >>> (data, n_blocks, expanded_key, rounds);
}
