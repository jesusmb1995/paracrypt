#define BOOST_TEST_MODULE paracrypt
#include <boost/test/included/unit_test.hpp>
#include "../logging.hpp"
#include "../openssl/AES_key_schedule.h"
#include <stdint.h>

const unsigned char k[128] = {
   		0x2bU, 0x7eU, 0x15U, 0x16U,
   		0x28U, 0xaeU, 0xd2U, 0xa6U,
   		0xabU, 0xf7U, 0x15U, 0x88U,
   		0x09U, 0xcfU, 0x4fU, 0x3cU
};

BOOST_AUTO_TEST_SUITE( key_expansion )
#include "key_schedule_test.cpp"
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE( cuda_aes )
#include "cuda_aes_test.cpp"
#include "../CUDACipherDevice.hpp"
#include "../CudaEcbAes16B.hpp"

BOOST_AUTO_TEST_CASE(cuda_ecb_aes_16b)
{
    unsigned char data[128] = {
    		0x32U, 0x43U, 0xf6U, 0xa8U,
    		0x88U, 0x5aU, 0x30U, 0x8dU,
    		0x31U, 0x31U, 0x98U, 0xa2U,
    		0xe0U, 0x37U, 0x07U, 0x34U
    };
    const unsigned char expected_output[128] = {
    		0x39U, 0x02U, 0xdcU, 0x19U,
    		0x25U, 0xdcU, 0x11U, 0x6aU,
    		0x84U, 0x09U, 0x85U, 0x0bU,
    		0x1dU, 0xfbU, 0x97U, 0x32U
    };

    paracrypt::CUDACipherDevice* gpu = new paracrypt::CUDACipherDevice(0);
    paracrypt::CudaAES* aes = new paracrypt::CudaEcbAES16B();
    aes->setDevice(gpu);
    aes->malloc(1);
    aes->encrypt((unsigned char*)&data,(unsigned char*)&data,1);

    delete aes;
    delete gpu;
}
BOOST_AUTO_TEST_SUITE_END()
